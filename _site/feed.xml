<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>The blog of Hao</title>
 <link href="http://haoch.me/atom.xml" rel="self"/>
 <link href="http://haoch.me"/>
 <updated>2014-03-13T00:48:35+01:00</updated>
 <id>http://haoch.me</id>
 <author>
   <name>Hao</name>
   <email>cn.haochen@gmail.com</email>
 </author>

 
 <entry>
   <title>Scala 中序操作符</title>
   <link href="http://haoch.me/articles/scala-operator.html"/>
   <updated>2014-03-05T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-operator</id>
   <content type="html">&lt;p&gt;Scala中任何接受单一参数的方法可以被用作 &lt;em&gt;中序操作符&lt;/em&gt;。这里是&lt;code&gt;MyBool&lt;/code&gt;类的定义，定义了三个方法&lt;code&gt;and&lt;/code&gt;，&lt;code&gt;or&lt;/code&gt;和&lt;code&gt;negate&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyBool(x: Boolean) {
  def and(that: MyBool): MyBool = if (x) that else this
  def or(that: MyBool): MyBool = if (x) this else that
  def negate: MyBool = new MyBool(!x)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在可以将&lt;code&gt;and&lt;/code&gt;和&lt;code&gt;or&lt;/code&gt;用作中序操作符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def not(x: MyBool) = x negate; // semicolon required here
def xor(x: MyBool, y: MyBool) = (x or y) and not(x and y)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正如这段代码的第一行所示，也可以将空元方法用作后序操作符。第二行利用&lt;code&gt;and&lt;/code&gt;和&lt;code&gt;or&lt;/code&gt;方法定义了一个&lt;code&gt;xor&lt;/code&gt;函数以及新的&lt;code&gt;not&lt;/code&gt;函数。这个例子中， &lt;em&gt;中序操作符&lt;/em&gt; 的使用帮助使得&lt;code&gt;xor&lt;/code&gt;的定义更加可读。&lt;/p&gt;

&lt;p&gt;这是更传统的面向对象编程语言语法对应的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def not(x: MyBool) = x.negate; // semicolon required here
def xor(x: MyBool, y: MyBool) = x.or(y).and(x.and(y).negate)
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 命名参数</title>
   <link href="http://haoch.me/articles/scala-named-parameter.html"/>
   <updated>2014-03-05T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-named-parameter</id>
   <content type="html">&lt;p&gt;当调用方法和函数时，你能在调用中显式使用变量名，像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def printName(first:String, last:String) = {
    println(first + &quot; &quot; + last)
  }

  printName(&quot;John&quot;,&quot;Smith&quot;)
  // Prints &quot;John Smith&quot;
  printName(first = &quot;John&quot;,last = &quot;Smith&quot;)
  // Prints &quot;John Smith&quot;
  printName(last = &quot;Smith&quot;,first = &quot;John&quot;)
  // Prints &quot;John Smith&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意一旦你在调用中使用了参数名，只要所有参数都被命名，顺序便没有意义。这个特性与&lt;a href=&quot;default-parameter-values.html&quot;&gt;默认参数值&lt;/a&gt;配合使用效果很好:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def printName(first:String = &quot;John&quot;, last:String = &quot;Smith&quot;) = {
    println(first + &quot; &quot; + last)
  }

  printName(last = &quot;Jones&quot;)
  // Prints &quot;John Jones&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于你能将参数以任何你喜欢的顺序放置，你能在参数列表中优先考虑使用参数的默认值。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 混入类合成</title>
   <link href="http://haoch.me/articles/scala-mixin-composition.html"/>
   <updated>2014-03-05T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-mixin-composition</id>
   <content type="html">&lt;p&gt;相对于只支持 &lt;em&gt;单一继承&lt;/em&gt; 的语言，Scala有一个更加通用的类重用的概念。Scala允许定义新类的时候重用 &lt;em&gt;一个类中新增的成员定义&lt;/em&gt; （即相较于其父类的差异之处）。表达为一个 &lt;em&gt;混入类合成&lt;/em&gt; 。考虑下面对于迭代器的抽象：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class AbsIterator {
  type T
  def hasNext: Boolean
  def next: T
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来， 考虑一个继承至&lt;code&gt;AbsIterator&lt;/code&gt;的混入类，有一个&lt;code&gt;foreach&lt;/code&gt;方法，将给定函数应用于迭代器返回的每个元素。为了定义一个能被用作混入类的类，我们采用关键字&lt;code&gt;trait&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait RichIterator extends AbsIterator {
  def foreach(f: T =&amp;gt; Unit) { while (hasNext) f(next) }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里有一个具体的迭代器类，返回给定字符串的连续字符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class StringIterator(s: String) extends AbsIterator {
  type T = Char
  private var i = 0
  def hasNext = i &amp;lt; s.length()
  def next = { val ch = s charAt i; i += 1; ch }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们想将&lt;code&gt;StringIterator&lt;/code&gt;和&lt;code&gt;RichIterator&lt;/code&gt;的功能合并到一个类中。单独利用单一继承和接口是不可能的，因为两个类都包含成员的代码实现。Scala借助于它的 &lt;em&gt;混入类合成&lt;/em&gt; 。它允许程序员重用类定义的不同点，也就是所有没有继承的新的定义。这个机制使得可以合并&lt;code&gt;StringIterator&lt;/code&gt;和&lt;code&gt;RichIterator&lt;/code&gt;，正如下面测试程序所做的，打印一列给定字符串的所有字符。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object StringIteratorTest {
  def main(args: Array[String]) {
    class Iter extends StringIterator(args(0)) with RichIterator
    val iter = new Iter
    iter foreach println
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;main&lt;/code&gt;函数中的&lt;code&gt;Iter&lt;/code&gt;类是利用关键字&lt;code&gt;with&lt;/code&gt;通过父亲&lt;code&gt;StringIterator&lt;/code&gt;和&lt;code&gt;RichIterator&lt;/code&gt;的混入类组合构造而成。第一个父亲称之为 &lt;code&gt;Iter&lt;/code&gt;的 &lt;em&gt;超类&lt;/em&gt; ， 而第二个（以及其他任何声明的）父亲称之为一个 &lt;em&gt;混入类&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 局部类型推理</title>
   <link href="http://haoch.me/articles/scala-local-type-inference.html"/>
   <updated>2014-03-05T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-local-type-inference</id>
   <content type="html">&lt;p&gt;Scala有一个内置类型推理机制，允许程序员省略特性类型注释。事实上，Scala中通常没必要指定变量的类型，因为编译器能从变量的初始化表达式中推理出其类型。同样方法的返回类型也经常能被省略，因为它们对应着主体的类型，可被编译器推测出来。&lt;/p&gt;

&lt;p&gt;这里有个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object InferenceTest1 extends App {
  val x = 1 + 2 * 3         // the type of x is Int
  val y = x.toString()      // the type of y is String
  def succ(x: Int) = x + 1  // method succ returns Int values
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于递归方法而言，编译器不能推理出结果类型。这有个程序便会因为这个原因而编译失败：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object InferenceTest2 {
  def fac(n: Int) = if (n == 0) 1 else n * fac(n - 1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当&lt;a href=&quot;polymorphic-methods.html&quot;&gt;多态方法&lt;/a&gt; 被调用或者&lt;a href=&quot;generic-classes.html&quot;&gt;范型类&lt;/a&gt; 被实例化时也不需要强制指定类型参数。Scala编译器会通过上下文和实际方法／构造函数参数的类型来推理这些缺失的类型参数。&lt;/p&gt;

&lt;p&gt;这里有个例子说明这点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class MyPair[A, B](x: A, y: B);
object InferenceTest3 extends App {
  def id[T](x: T) = x
  val p = MyPair(1, &quot;scala&quot;) // type: MyPair[Int, String]
  val q = id(1)              // type: Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个程序的最后两行等价于下面的代码，所有推理的类型都变成显式的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val x: MyPair[Int, String] = MyPair[Int, String](1, &quot;scala&quot;)
val y: Int = id[Int](1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在某些情景下依赖Scala的类型推理机制可能会相当危险的，正如下面这个程序所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object InferenceTest4 {
  var obj = null
  obj = new Object()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个程序无法编译，因为为变量&lt;code&gt;obj&lt;/code&gt;推断的类型是&lt;code&gt;Null&lt;/code&gt;。因为那个 类型的唯一值是&lt;code&gt;null&lt;/code&gt;，不可能使得它指向其他值。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala和Java内部类</title>
   <link href="http://haoch.me/articles/scala-inner-class.html"/>
   <updated>2014-03-04T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-inner-class</id>
   <content type="html">&lt;p&gt;Scala中类能够以其他类作为成员。然而不同于类Java语言中内部类是作为封闭类的成员，Scala中这些内部类是对外部对象的约束。为了说明其中的不同，我们快速地勾画一个图数据类型的实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Graph {
  class Node {
    var connectedNodes: List[Node] = Nil
    def connectTo(node: Node) {
      if (connectedNodes.find(node.equals).isEmpty) {
        connectedNodes = node :: connectedNodes
      }
    }
  }
  var nodes: List[Node] = Nil
  def newNode: Node = {
    val res = new Node
    nodes = res :: nodes
    res
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Scala it is possible to let classes have other classes as members. Opposed to Java-like languages where such inner classes are members of the enclosing class, in Scala such inner classes are bound to the outer object. To illustrate the difference, we quickly sketch the implementation of a graph datatype:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Graph {
  class Node {
    var connectedNodes: List[Node] = Nil
    def connectTo(node: Node) {
      if (connectedNodes.find(node.equals).isEmpty) {
        connectedNodes = node :: connectedNodes
      }
    }
  }
  var nodes: List[Node] = Nil
  def newNode: Node = {
    val res = new Node
    nodes = res :: nodes
    res
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在我们的程序中，图由一系列节点表示。节点是内部类&lt;code&gt;Node&lt;/code&gt;的对象。每个节点有一系列邻居，存放在列表&lt;code&gt;connectedNodes&lt;/code&gt;中。现在我们设置一个拥有一些节点的图并将节点依次连接起来。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object GraphTest extends App {
  val g = new Graph
  val n1 = g.newNode
  val n2 = g.newNode
  val n3 = g.newNode
  n1.connectTo(n2)
  n3.connectTo(n1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们现在结合类型来丰富上面的例子，显式声明各个定义的实体是什么类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object GraphTest extends App {
  val g: Graph = new Graph
  val n1: g.Node = g.newNode
  val n2: g.Node = g.newNode
  val n3: g.Node = g.newNode
  n1.connectTo(n2)
  n3.connectTo(n1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码清晰地显示节点类型以它的外部实例为前缀（即我们的例子中的对象&lt;code&gt;g&lt;/code&gt;）。如果我们现在有两个图，Scala的类型系统不允许我们将一个图中定义节点与另外一个图的节点混用，因为其他图的节点具有不同的类型。
这是一个不合法的程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object IllegalGraphTest extends App {
  val g: Graph = new Graph
  val n1: g.Node = g.newNode
  val n2: g.Node = g.newNode
  n1.connectTo(n2)      // legal
  val h: Graph = new Graph
  val n3: h.Node = h.newNode
  n1.connectTo(n3)      // illegal!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意Java中前面的示例程序中的最后一行本应该是正确的。对于其他图的节点而言，Java将会赋予相同的类型&lt;code&gt;Graph.Node&lt;/code&gt;；即&lt;code&gt;Node&lt;/code&gt;是以类&lt;code&gt;Graph&lt;/code&gt;作为前缀。Scala中也可以表达这样的类型，写作&lt;code&gt;Graph#Node&lt;/code&gt;。如果我们想要能够链接不同图的节点，我们必须按接下来这种方式修改我们起初图实现的定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Graph {
  class Node {
    var connectedNodes: List[Graph#Node] = Nil
    def connectTo(node: Graph#Node) {
      if (connectedNodes.find(node.equals).isEmpty) {
        connectedNodes = node :: connectedNodes
      }
    }
  }
  var nodes: List[Node] = Nil
  def newNode: Node = {
    val res = new Node
    nodes = res :: nodes
    res
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;请注意这个程序不允许我们将一个节点添加到两个不同的图。如果也想移除这个限制，我们必须将变量节点的类型变为&lt;code&gt;Graph#Node&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 类型下限</title>
   <link href="http://haoch.me/articles/scala-lower-type-bound.html"/>
   <updated>2014-02-19T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-lower-type-bound</id>
   <content type="html">&lt;p&gt;因为&lt;a href=&quot;upper-type-bounds.html&quot;&gt;类型上限&lt;/a&gt;将类型限制为另外一个类型的子类型，顾名思义&lt;em&gt;类型下限&lt;/em&gt; 则是声明一个类型是另一个类型的父类型。术语&lt;code&gt;T &amp;gt;: A&lt;/code&gt;表示类型参数&lt;code&gt;T&lt;/code&gt;或者抽象类型&lt;code&gt;T&lt;/code&gt;指的是类型&lt;code&gt;A&lt;/code&gt;的子类型。&lt;/p&gt;

&lt;p&gt;这里有一个说明它有用的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class ListNode[T](h: T, t: ListNode[T]) {
  def head: T = h
  def tail: ListNode[T] = t
  def prepend(elem: T): ListNode[T] =
    ListNode(elem, this)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的程序实现了一个带有前置操作的链表。不幸地是，类&lt;code&gt;ListNode&lt;/code&gt;的类型参数中的类型是不变的；也就是类型&lt;code&gt;ListNode[String]&lt;/code&gt;不是类型&lt;code&gt;List[Object]&lt;/code&gt;的子类型。借助于&lt;a href=&quot;variances.html&quot;&gt;型变注解&lt;/a&gt;我们能表达这样的子类型语义。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class ListNode[+T](h: T, t: ListNode[T]){ ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很不幸这个程序无法通过编译，因为协方差标注只能够当类型变量用在协变量位置时使用。因为类型变量&lt;code&gt;T&lt;/code&gt;是作为方法&lt;code&gt;prepend&lt;/code&gt;的参数类型，违背了这一规则。然而借助&lt;code&gt;类型下限&lt;/code&gt;，我们能实现一个&lt;code&gt;T&lt;/code&gt;仅出现在协变量位置的前置方法。&lt;/p&gt;

&lt;p&gt;对应代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class ListNode[+T](h: T, t: ListNode[T]) {
  def head: T = h
  def tail: ListNode[T] = t
  def prepend[U &amp;gt;: T](elem: U): ListNode[U] =
    ListNode(elem, this)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：新的&lt;code&gt;prepend&lt;/code&gt;方法有一个略微没那么严格的类型。事实上它允许将子类型的对象前置到一个已存在的列表中。结果的列表是这个子类型的列表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这里有一些代码阐明这点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object LowerBoundTest extends App {
  val empty: ListNode[Null] = ListNode(null, null)
  val strList: ListNode[String] = empty.prepend(&quot;hello&quot;)
                                       .prepend(&quot;world&quot;)
  val anyList: ListNode[Any] = strList.prepend(12345)
}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 类型上限</title>
   <link href="http://haoch.me/articles/scala-upper-type-bounds.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-upper-type-bounds</id>
   <content type="html">&lt;p&gt;Scala中&lt;a href=&quot;generic-classes.html&quot;&gt;类型参数&lt;/a&gt;和&lt;a href=&quot;abstract-types.html&quot;&gt;抽象类型&lt;/a&gt;可以通过类型范围来约束。这样的类型范围限制类型的具体值而且可能透露更多关于这些类型的成员信息。 &lt;em&gt;类型上限&lt;/em&gt; &lt;code&gt;T &amp;lt;: A&lt;/code&gt; 声明类型变量&lt;code&gt;T&lt;/code&gt;指向类型&lt;code&gt;A&lt;/code&gt;的子类型。
这里有个例子，依赖于多态方法&lt;code&gt;findSimilar&lt;/code&gt;实现的类型上限。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Similar {
  def isSimilar(x: Any): Boolean
}
case class MyInt(x: Int) extends Similar {
  def isSimilar(m: Any): Boolean =
    m.isInstanceOf[MyInt] &amp;amp;&amp;amp;
    m.asInstanceOf[MyInt].x == x
}
object UpperBoundTest extends App {
  def findSimilar[T &amp;lt;: Similar](e: T, xs: List[T]): Boolean =
    if (xs.isEmpty) false
    else if (e.isSimilar(xs.head)) true
    else findSimilar[T](e, xs.tail)
  val list: List[MyInt] = List(MyInt(1), MyInt(2), MyInt(3))
  println(findSimilar[MyInt](MyInt(4), list))
  println(findSimilar[MyInt](MyInt(2), list))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有类型上限标注，不可能在方法&lt;code&gt;findSimilar&lt;/code&gt;中调用方法&lt;code&gt;isSimilar&lt;/code&gt;。
类型下限的用法在&lt;a href=&quot;lower-type-bounds.html&quot;&gt;这里&lt;/a&gt;讨论。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala Traits</title>
   <link href="http://haoch.me/articles/scala-traits.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-traits</id>
   <content type="html">&lt;p&gt;类似Java中的接口，特性通常被用于通过制定支持方法的签名来定义对象类型。不同于Java的是Scala允许特性被部分实现；也就是说，可以定义一些方法的默认实现。相较于类，特性不能有构造器参数。
这里有个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Similarity {
  def isSimilar(x: Any): Boolean
  def isNotSimilar(x: Any): Boolean = !isSimilar(x)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个特性由两个方法&lt;code&gt;isSimilar&lt;/code&gt;和&lt;code&gt;isNotSimilar&lt;/code&gt;组成。 然而&lt;code&gt;isSimilar&lt;/code&gt;不提供具体的方法实现（就Java术语而言是抽象的），方法&lt;code&gt;isNotSimilar&lt;/code&gt;定义了具体实现。所以，整合这个特性的类只需要为&lt;code&gt;isSimilar&lt;/code&gt;提供具体实现。&lt;code&gt;isNotSimilar&lt;/code&gt;的行为正确地继承至这个特性。典型的做法是利用&lt;a href=&quot;mixin-class-composition.html&quot;&gt;混合类合成&lt;/a&gt;将特性整合到&lt;a href=&quot;classes.html&quot;&gt;类&lt;/a&gt;（或者其他特性）中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Point(xc: Int, yc: Int) extends Similarity {
  var x: Int = xc
  var y: Int = yc
  def isSimilar(obj: Any) =
    obj.isInstanceOf[Point] &amp;amp;&amp;amp;
    obj.asInstanceOf[Point].x == x
}
object TraitsTest extends Application {
  val p1 = new Point(2, 3)
  val p2 = new Point(2, 4)
  val p3 = new Point(3, 3)
  println(p1.isNotSimilar(p2))
  println(p1.isNotSimilar(p3))
  println(p1.isNotSimilar(2))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;程序的输出为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;false
true
true
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 模式匹配</title>
   <link href="http://haoch.me/articles/scala-pattern-matching.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-pattern-matching</id>
   <content type="html">&lt;p&gt;Scala有内置通用模式匹配机制。它遵循首次匹配策略，允许匹配任何形式的数据。
这里是一个小例子显示如何针对整数值进行匹配：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object MatchTest1 extends App {
  def matchTest(x: Int): String = x match {
    case 1 =&amp;gt; &quot;one&quot;
    case 2 =&amp;gt; &quot;two&quot;
    case _ =&amp;gt; &quot;many&quot;
  }
  println(matchTest(3))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有&lt;code&gt;case&lt;/code&gt;语句的块定义了一个函数，将整数映射到字符串。&lt;code&gt;match&lt;/code&gt;关键字提供了一种方便的方式将函数应用于对象（就像上面的模式匹配函数）。&lt;/p&gt;

&lt;p&gt;这里是第二个例子，针对不同类型的模式匹配一个值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object MatchTest2 extends App {
  def matchTest(x: Any): Any = x match {
    case 1 =&amp;gt; &quot;one&quot;
    case &quot;two&quot; =&amp;gt; 2
    case y: Int =&amp;gt; &quot;scala.Int&quot;
  }
  println(matchTest(&quot;two&quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个&lt;code&gt;case&lt;/code&gt;当&lt;code&gt;x&lt;/code&gt;指带整数值&lt;code&gt;1&lt;/code&gt;时匹配。第二个&lt;code&gt;case&lt;/code&gt;当&lt;code&gt;x&lt;/code&gt;等于字符串&lt;code&gt;&quot;Two&quot;&lt;/code&gt;时匹配。第三个case由一个类型模式组成；它针对任意整数匹配并且将选择器值&lt;code&gt;x&lt;/code&gt;绑定至整数类型的变量&lt;code&gt;y&lt;/code&gt;上。&lt;/p&gt;

&lt;p&gt;Scala的模式匹配语法在匹配基于&lt;a href=&quot;case-classes.html&quot;&gt;实例类&lt;/a&gt;表示的代数类型时最有用。
Scala也允许利用&lt;a href=&quot;extractor-objects.html&quot;&gt;提取器对象&lt;/a&gt;中的&lt;code&gt;unapply&lt;/code&gt;方法独立于实例类来定义模式。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 隐式参数</title>
   <link href="http://haoch.me/articles/scala-implicit-parameters.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-implicit-parameters</id>
   <content type="html">&lt;p&gt;有 &lt;em&gt;隐式参数&lt;/em&gt; 的方法能够像普通方法一样应用于参量。这种情况中隐式标签没有效果。然而，如果这样一个方法缺少针对它的隐式参数的参量时，这些参量将会自动提供。&lt;/p&gt;

&lt;p&gt;符合条件地传给隐式参数的实际参量归为两类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先，符合所有标识符 x 都能够从不需要前缀的方法调用中访问，并且表示一个隐式定义或者一个隐式参数。&lt;/li&gt;
  &lt;li&gt;其次，要符合隐式参数类型的相邻模块的所有成员也都标记为隐式的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来的例子中我们定义了一个方法&lt;code&gt;sum&lt;/code&gt;，利用独异点（monoid）的&lt;code&gt;add&lt;/code&gt;和&lt;code&gt;unit&lt;/code&gt;操作计算一系列成员的和。请注意隐式值不能是顶层的，它们必须是模版的成员。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class SemiGroup[A] {
  def add(x: A, y: A): A
}
abstract class Monoid[A] extends SemiGroup[A] {
  def unit: A
}
object ImplicitTest extends App {
  implicit object StringMonoid extends Monoid[String] {
    def add(x: String, y: String): String = x concat y
    def unit: String = &quot;&quot;
  }
  implicit object IntMonoid extends Monoid[Int] {
    def add(x: Int, y: Int): Int = x + y
    def unit: Int = 0
  }
  def sum[A](xs: List[A])(implicit m: Monoid[A]): A =
    if (xs.isEmpty) m.unit
    else m.add(xs.head, sum(xs.tail))

  println(sum(List(1, 2, 3)))
  println(sum(List(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是这个Scala程序的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;6
abc
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 高阶函数</title>
   <link href="http://haoch.me/articles/scala-higher-order-functions.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-higher-order-functions</id>
   <content type="html">&lt;p&gt;Scala允许定义高阶函数。这是指 &lt;em&gt;将其他函数作为参数&lt;/em&gt; ，或者 &lt;em&gt;结果是一个函数&lt;/em&gt; 的函数。这里是函数&lt;code&gt;apply&lt;/code&gt;，以另一个函数&lt;code&gt;f&lt;/code&gt;和一个值&lt;code&gt;v&lt;/code&gt;，并且将函数&lt;code&gt;f&lt;/code&gt;应用于&lt;code&gt;v&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def apply(f: Int =&amp;gt; String, v: Int) = f(v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：如果上下文需要，方法会自动强制转化为函数&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这里是另一个例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Decorator(left: String, right: String) {
  def layout[A](x: A) = left + x.toString() + right
}

object FunTest extends App {
  def apply(f: Int =&amp;gt; String, v: Int) = f(v)
  val decorator = new Decorator(&quot;[&quot;, &quot;]&quot;)
  println(apply(decorator.layout, 7))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行会产生输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[7]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子中，方法&lt;code&gt;decorator.layout&lt;/code&gt;应方法&lt;code&gt;apply&lt;/code&gt;的要求自动强制转化为类型&lt;code&gt;Int =&amp;gt; String&lt;/code&gt;的值。请注意方法&lt;code&gt;decorator.layout&lt;/code&gt;是一个 &lt;em&gt;多态方法&lt;/em&gt; （即它对它的一些签名类型进行了抽象），而且Scala编译器必须首先恰当地实例化它的方法类型。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 显式指定自身引用类型</title>
   <link href="http://haoch.me/articles/scala-explicitly-typed-self-references.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-explicitly-typed-self-references</id>
   <content type="html">&lt;p&gt;当开发可扩展的软件，有时显式声明&lt;code&gt;this&lt;/code&gt;的类型是很有用的。为了说明这一点，我们从Scala中一个小的图数据结构的可扩展表示开始。&lt;/p&gt;

&lt;p&gt;这里描述图的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class Graph {
  type Edge
  type Node &amp;lt;: NodeIntf
  abstract class NodeIntf {
    def connectWith(node: Node): Edge
  }
  def nodes: List[Node]
  def edges: List[Edge]
  def addNode: Node
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图由一系列的节点和边构成，所有的节点和边类型都是左侧抽象。使用&lt;a href=&quot;abstract-types.html&quot;&gt;抽象类型&lt;/a&gt;能够通过实现图的特性来提供节点和边的各自具体类。此外，有一个&lt;code&gt;addNode&lt;/code&gt;方法来为图添加新的节点。节点通过方法&lt;code&gt;connectWith&lt;/code&gt;连接。&lt;/p&gt;

&lt;p&gt;下一个类给出了类&lt;code&gt;Graph&lt;/code&gt;的可能实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class DirectedGraph extends Graph {
  type Edge &amp;lt;: EdgeImpl
  class EdgeImpl(origin: Node, dest: Node) {
    def from = origin
    def to = dest
  }
  class NodeImpl extends NodeIntf {
    def connectWith(node: Node): Edge = {
      val edge = newEdge(this, node)
      edges = edge :: edges
      edge
    }
  }
  protected def newNode: Node
  protected def newEdge(from: Node, to: Node): Edge
  var nodes: List[Node] = Nil
  var edges: List[Edge] = Nil
  def addNode: Node = {
    val node = newNode
    nodes = node :: nodes
    node
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类&lt;code&gt;DirectedGraph&lt;/code&gt;通过提供部分细节来指定&lt;code&gt;Graph&lt;/code&gt;类。这个实现也只是部分的，因为我们想接下来可以继承&lt;code&gt;DirectedGraph&lt;/code&gt;.所以这个类保持所有实现细节开放，而且边和节点类型也是抽象的。
然而，类&lt;code&gt;DirectedGraph&lt;/code&gt;还是透露了关于边类型的实现的一些额外细节，它限制了｀EdgeImpl｀类的范围。
此外，我们有一些边和节点的初步实现，通过类&lt;code&gt;EdgeImpl&lt;/code&gt;和&lt;code&gt;NodeImpl&lt;/code&gt;表示。因为部分图的实现中，有必要创建新的节点和边对象，我们还必须添加工厂方法&lt;code&gt;newNode&lt;/code&gt;和&lt;code&gt;newEdge&lt;/code&gt;。方法&lt;code&gt;addNode&lt;/code&gt;和&lt;code&gt;connectWith&lt;/code&gt;都是依据这些工厂方法定义的。更仔细来看方法&lt;code&gt;connectWith&lt;/code&gt;的实现，可以发现为了创建一个边，我们必须将自引用&lt;code&gt;this&lt;/code&gt;传给工厂方法&lt;code&gt;newEdge&lt;/code&gt;。但是&lt;code&gt;this&lt;/code&gt;被指定类型为&lt;code&gt;NodeImpl&lt;/code&gt;，所以与对应工厂方法要求的类型&lt;code&gt;Node&lt;/code&gt;不兼容。因此，上述程序并未完全成型，Scala编译器将会报出一个错误信息。&lt;/p&gt;

&lt;p&gt;Scala中，可以通过显式指定自引用&lt;code&gt;this&lt;/code&gt;的另一个类型来将一个类与另一类型（将在后面实现）关联起来。我们能利用这一机制修订我们上面的代码。显式自身类型在类&lt;code&gt;DirectedGraph&lt;/code&gt;的主体中指定。&lt;/p&gt;

&lt;p&gt;修订后的程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class DirectedGraph extends Graph {
  ...
  class NodeImpl extends NodeIntf {
    self: Node =&amp;gt;
    def connectWith(node: Node): Edge = {
      val edge = newEdge(this, node)  // now legal
      edges = edge :: edges
      edge
    }
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在类&lt;code&gt;NodeImpl&lt;/code&gt;的新定义里，&lt;code&gt;this&lt;/code&gt;类型为&lt;code&gt;Node&lt;/code&gt;。由于类型&lt;code&gt;Node&lt;/code&gt;是抽象的，而且我们还不知道是否&lt;code&gt;NodeImpl&lt;/code&gt;真的是&lt;code&gt;Node&lt;/code&gt;的子类型，Scala的类型系统不会允许我们实例这个类。但是我们声明this的显式类型标注，某点而言，&lt;code&gt;NodeImpl&lt;/code&gt;（的子类型）必须表示着一个&lt;code&gt;Node&lt;/code&gt;的子类型从而能够实例化。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DirectedGraph&lt;/code&gt;的具体定制如下，所有抽象类成员均被转为具体的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ConcreteDirectedGraph extends DirectedGraph {
  type Edge = EdgeImpl
  type Node = NodeImpl
  protected def newNode: Node = new NodeImpl
  protected def newEdge(f: Node, t: Node): Edge =
    new EdgeImpl(f, t)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意在这个类中，我们能够实例化&lt;code&gt;NodeImpl&lt;/code&gt;，因为现在我们知道&lt;code&gt;NodeImpl&lt;/code&gt;指的是&lt;code&gt;Node&lt;/code&gt;的子类型（仅仅是一个&lt;code&gt;NodeImpl&lt;/code&gt;的别名而已）。&lt;/p&gt;

&lt;p&gt;这里是类&lt;code&gt;ConcreteDirectedGraph&lt;/code&gt;的用法例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object GraphTest extends App {
  val g: Graph = new ConcreteDirectedGraph
  val n1 = g.addNode
  val n2 = g.addNode
  val n3 = g.addNode
  n1.connectWith(n2)
  n2.connectWith(n3)
  n1.connectWith(n3)
}
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Scala 柯里化</title>
   <link href="http://haoch.me/articles/scala-currying.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-currying</id>
   <content type="html">&lt;p&gt;Scala的Currying机制即“柯里化”。
方法可能定义多个参数列表。当一个方法被较少数量的参数列表调用时，那么它将会产生一个接受缺少的参数列表作为它的参数的函数。&lt;/p&gt;

&lt;p&gt;这里有个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object CurryTest extends App {

  def filter(xs: List[Int], p: Int =&amp;gt; Boolean): List[Int] =
    if (xs.isEmpty) xs
    else if (p(xs.head)) xs.head :: filter(xs.tail, p)
    else filter(xs.tail, p)

  def modN(n: Int)(x: Int) = ((x % n) == 0)

  val nums = List(1, 2, 3, 4, 5, 6, 7, 8)
  println(filter(nums, modN(2)))
  println(filter(nums, modN(3)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：方法&lt;code&gt;modN&lt;/code&gt;在两次&lt;code&gt;filter&lt;/code&gt;的调用中被部分使用；也就是只有它的第一个参数被实际使用到。&lt;code&gt;modN(2)&lt;/code&gt;这句生成了一个&lt;code&gt;Int =&amp;gt; Boolean&lt;/code&gt;类型的函数，而且因此成为了函数&lt;code&gt;filter&lt;/code&gt;的第二个参数的可能候选。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;上面程序的输出如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List(2,4,6,8)
List(3,6)
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 混合类型</title>
   <link href="http://haoch.me/articles/scala-compound-types.html"/>
   <updated>2014-02-18T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-compound-types</id>
   <content type="html">&lt;p&gt;有些时候需要表示一个对象的类型是多个其他类型的子类型。Scala中可以借助&lt;em&gt;混合类型&lt;/em&gt;来表达，是这些对象类型的交集。&lt;/p&gt;

&lt;p&gt;假设我们有两个特性&lt;code&gt;Cloneable&lt;/code&gt;和&lt;code&gt;Resetable&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Cloneable extends java.lang.Cloneable {
  override def clone(): Cloneable = { 
    super.clone().asInstanceOf[Cloneable]
  }
}
trait Resetable {
  def reset: Unit
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在假设我们想要写一个函数&lt;code&gt;cloneAndReset&lt;/code&gt;，接受一个对象，克隆它并且重置原始对象：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def cloneAndReset(obj: ?): Cloneable = {
  val cloned = obj.clone()
  obj.reset
  cloned
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;问题在于参数&lt;code&gt;obj&lt;/code&gt;的类型是什么。如果是&lt;code&gt;Cloneable&lt;/code&gt;，那么这个对象能够被&lt;code&gt;clone&lt;/code&gt;，但不能&lt;code&gt;reset&lt;/code&gt;；如果是&lt;code&gt;Resetable&lt;/code&gt;，我们能够&lt;code&gt;reset&lt;/code&gt;它，但是没有&lt;code&gt;clone&lt;/code&gt;操作。为了避免这样情况下的类型转换，我们能指定&lt;code&gt;obj&lt;/code&gt;的类型同时是&lt;code&gt;Cloneable&lt;/code&gt;和&lt;code&gt;Resetable&lt;/code&gt;。这个混合类型Scala中写作：&lt;code&gt;Cloneable with Resetable&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这里是更新后的函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def cloneAndReset(obj: Cloneable with Resetable): Cloneable = {
  //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;混合类型可以由多个对象类型构成，而且他们可以使用单一的改良，从而精简现有对象成员的声明。通常格式是：&lt;code&gt;A with B with C ... { refinement }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在关于抽象类型&lt;a href=&quot;abstract-types.html&quot;&gt;abstract types&lt;/a&gt;的页面中给出过一个关于改良的使用的例子. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 匿名函数</title>
   <link href="http://haoch.me/articles/scala-anonymouse-function.html"/>
   <updated>2014-02-17T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-anonymouse-function</id>
   <content type="html">&lt;p&gt;Scala提供一套相当轻量级的语法来定义匿名函数。下述表达式创建了一个整数的递增函数（successor function）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(x: Int) =&amp;gt; x + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种语法是下面匿名类定义的缩写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new Function1[Int, Int] {
  def apply(x: Int): Int = x + 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以定义多个参数的函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(x: Int, y: Int) =&amp;gt; &quot;(&quot; + x + &quot;, &quot; + y + &quot;)&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者没有参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;() =&amp;gt; { System.getProperty(&quot;user.dir&quot;) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也有一套非常轻量级的方式来写函数类型。这里是上述三个函数的类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Int =&amp;gt; Int
(Int, Int) =&amp;gt; String
() =&amp;gt; String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种语法是下面类型的缩写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function1[Int, Int]
Function2[Int, Int, String]
Function0[String]
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 注解</title>
   <link href="http://haoch.me/articles/scala-annotations.html"/>
   <updated>2014-02-16T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-annotations</id>
   <content type="html">&lt;p&gt;注释将元信息和定义关联到一起。&lt;/p&gt;

&lt;p&gt;简单的注释从句的格式有&lt;code&gt;@C&lt;/code&gt;或&lt;code&gt;@C(a1, .., an)&lt;/code&gt;。这里&lt;code&gt;C&lt;/code&gt;是一个类&lt;code&gt;C&lt;/code&gt;的构造器，必须遵从类&lt;code&gt;scala.Annotation&lt;/code&gt;。所有指定的构造器参数&lt;code&gt;a1, .., an&lt;/code&gt;必须是常量表达式（例如，数值序列，字符串，类序列，Java枚举，以及他们的一维数组）。&lt;/p&gt;

&lt;p&gt;注释从句作用于后面第一个定义或者声明。一个定义或者声明之前可能有不止一个注释从句。这些从句给出的顺序没有影响。&lt;/p&gt;

&lt;p&gt;注释从句的意义在于 &lt;em&gt;实现依赖&lt;/em&gt; 。Java平台中，下面的Scala注释有对应的标准含义。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Scala&lt;/th&gt;
      &lt;th&gt;Java&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/SerialVersionUID.html&quot;&gt;&lt;code&gt;scala.SerialVersionUID&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html#navbar_bottom&quot;&gt;&lt;code&gt;serialVersionUID&lt;/code&gt;&lt;/a&gt; (field)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/cloneable.html&quot;&gt;&lt;code&gt;scala.cloneable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Cloneable.html&quot;&gt;&lt;code&gt;java.lang.Cloneable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/deprecated.html&quot;&gt;&lt;code&gt;scala.deprecated&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Deprecated.html&quot;&gt;&lt;code&gt;java.lang.Deprecated&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/inline.html&quot;&gt;&lt;code&gt;scala.inline&lt;/code&gt;&lt;/a&gt; (since 2.6.0)&lt;/td&gt;
      &lt;td&gt;no equivalent&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/native.html&quot;&gt;&lt;code&gt;scala.native&lt;/code&gt;&lt;/a&gt; (since 2.6.0)&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/docs/books/tutorial/java/nutsandbolts/_keywords.html&quot;&gt;&lt;code&gt;native&lt;/code&gt;&lt;/a&gt; (keyword)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/remote.html&quot;&gt;&lt;code&gt;scala.remote&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/rmi/Remote.html&quot;&gt;&lt;code&gt;java.rmi.Remote&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/index.html#scala.annotation.serializable&quot;&gt;&lt;code&gt;scala.serializable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html&quot;&gt;&lt;code&gt;java.io.Serializable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/throws.html&quot;&gt;&lt;code&gt;scala.throws&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/docs/books/tutorial/java/nutsandbolts/_keywords.html&quot;&gt;&lt;code&gt;throws&lt;/code&gt;&lt;/a&gt; (keyword)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/transient.html&quot;&gt;&lt;code&gt;scala.transient&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/docs/books/tutorial/java/nutsandbolts/_keywords.html&quot;&gt;&lt;code&gt;transient&lt;/code&gt;&lt;/a&gt; (keyword)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/unchecked.html&quot;&gt;&lt;code&gt;scala.unchecked&lt;/code&gt;&lt;/a&gt; (since 2.4.0)&lt;/td&gt;
      &lt;td&gt;no equivalent&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/volatile.html&quot;&gt;&lt;code&gt;scala.volatile&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://java.sun.com/docs/books/tutorial/java/nutsandbolts/_keywords.html&quot;&gt;&lt;code&gt;volatile&lt;/code&gt;&lt;/a&gt; (keyword)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.1/scala/reflect/BeanProperty.html&quot;&gt;&lt;code&gt;scala.reflect.BeanProperty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html&quot;&gt;&lt;code&gt;Design pattern&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;下面例子中我们为方法&lt;code&gt;read&lt;/code&gt;的定义添加&lt;code&gt;throws&lt;/code&gt;注释，为了捕获Java主程序抛出的异常。
In the following example we add the &lt;code&gt;throws&lt;/code&gt; annotation to the definition of the method &lt;code&gt;read&lt;/code&gt; in order to catch the thrown exception in the Java main program.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java编译器通过分析在方法或者构造器执行过程可能产生哪些异常，来检查程序是否包含对&lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se5.0/html/exceptions.html&quot;&gt;被检查的异常&lt;/a&gt;的处理。对于被检查的每个可能产生的异常，方法或构造器的&lt;strong&gt;throws&lt;/strong&gt;从句 &lt;em&gt;必须&lt;/em&gt; 提到那个异常类或者那个异常类的一个子类。
由于Scala不检查异常，Scala方法 &lt;em&gt;必须&lt;/em&gt; 标注一个或多个&lt;code&gt;throws&lt;/code&gt;注释，以便于Java代码能够捕获Scala方法抛出的异常。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;package examples
import java.io._
class Reader(fname: String) {
  private val in = new BufferedReader(new FileReader(fname))
  @throws(classOf[IOException])
  def read() = in.read()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面的Java程序打印以main方法传入第一个参数命名的文件的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package test;
import examples.Reader;  // Scala class !!
public class AnnotaTest {
    public static void main(String[] args) {
        try {
            Reader in = new Reader(args[0]);
            int c;
            while ((c = in.read()) != -1) {
                System.out.print((char) c);
            }
        } catch (java.io.IOException e) {
            System.out.println(e.getMessage());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释掉Reader类的&lt;code&gt;throws&lt;/code&gt;注解会在编译这个Java主程序产生下面的错误信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Main.java:11: exception java.io.IOException is never thrown in body of
corresponding try statement
        } catch (java.io.IOException e) {
          ^
1 error
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;java-&quot;&gt;Java 注释&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 请确保将&lt;code&gt;-target:jvm-1.5&lt;/code&gt;选项与Java注释一同使用。&lt;/p&gt;

&lt;p&gt;Java 1.5 介绍了以&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/language/annotations.html&quot;&gt;注释&lt;/a&gt;的形式的用户定义元数据。注释的一个关键的特性是基于特定的名－值对来初始化他们的元素。&lt;/p&gt;

&lt;h3 id=&quot;java-annotations&quot;&gt;Java Annotations&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure you use the &lt;code&gt;-target:jvm-1.5&lt;/code&gt; option with Java annotations.如果我们需要一个注释来跟踪某个类的源文件的情况下，我们可能定义成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Source {
  public String URL();
  public String mail();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并且像下面这样应用它&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Source(URL = &quot;http://coders.com/&quot;,
        mail = &quot;support@coders.com&quot;)
public class MyClass extends HisClass ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scala的一个注释程序看起来像一个构造器行为，为了表示一个Java注释，必须使用命名参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Source(URL = &quot;http://coders.com/&quot;,
        mail = &quot;support@coders.com&quot;)
class MyScalaClass ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果注释只包含一个元素（没有默认值），语法相当单调，所以为了方便，如果名称被指定为&lt;code&gt;value&lt;/code&gt;，能够用一种类似构造函数的语法应用到Java中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface SourceURL {
    public String value();
    public String mail() default &quot;&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并且可以像这样使用它&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SourceURL(&quot;http://coders.com/&quot;)
public class MyClass extends HisClass ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种用法在Scala中同样可行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SourceURL(&quot;http://coders.com/&quot;)
class MyScalaClass ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mail&lt;/code&gt;元素指定了一个默认值，所以我们不需要显式为它赋值。然而，如果我们需要这么做，我们不能在Java中混用两种方式！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SourceURL(value = &quot;http://coders.com/&quot;,
           mail = &quot;support@coders.com&quot;)
public class MyClass extends HisClass ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scala在这个方面提供更多灵活性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@SourceURL(&quot;http://coders.com/&quot;,
           mail = &quot;support@coders.com&quot;)
    class MyScalaClass ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个扩展的语法是与.NET的注释一致的，并且能涵盖他们的所有能力。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 自动类型依赖闭包</title>
   <link href="http://haoch.me/articles/scala-automatic-closures.html"/>
   <updated>2014-02-15T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-automatic-closures</id>
   <content type="html">&lt;p&gt;Scala允许无参函数名作为方法参数。当此类方法被调用时，这个无参函数名的实际参数并没有被执行，而是传入一个空元函数，囊括了对应参数的计算（所谓的 &lt;em&gt;按名调用&lt;/em&gt; 执行）。&lt;/p&gt;

&lt;p&gt;下面的代码展示了这个机制：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object TargetTest1 extends App {
  def whileLoop(cond: =&amp;gt; Boolean)(body: =&amp;gt; Unit): Unit =
    if (cond) {
      body
      whileLoop(cond)(body)
    }
  var i = 10
  whileLoop (i &amp;gt; 0) {
    println(i)
    i -= 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;函数&lt;code&gt;whileLoop&lt;/code&gt;接受两个参数&lt;code&gt;cond&lt;/code&gt;和&lt;code&gt;body&lt;/code&gt;。当这个函数被使用时，实际参数并没有被执行。但是无论什么时候这个真正的参数在&lt;code&gt;whileLoop&lt;/code&gt;的主体中被使用到，隐式创建的空元函数将被执行。因此，我们的方法&lt;code&gt;whileLoop&lt;/code&gt;利用递归实现了一个类-Java的while-loop。&lt;/p&gt;

&lt;p&gt;我们利用这种机制能够结合使用&lt;a href=&quot;operators.html&quot;&gt;前缀／后缀操作符&lt;/a&gt; 来创造更多复杂的语句（拥有优美语法）。&lt;/p&gt;

&lt;p&gt;这里是一个loop-unless语句的实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object TargetTest2 extends App {
  def loop(body: =&amp;gt; Unit): LoopUnlessCond =
    new LoopUnlessCond(body)
  protected class LoopUnlessCond(body: =&amp;gt; Unit) {
    def unless(cond: =&amp;gt; Boolean) {
      body
      if (!cond) unless(cond)
    }
  }
  var i = 10
  loop {
    println(&quot;i = &quot; + i)
    i -= 1
  } unless (i == 0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个&lt;code&gt;loop&lt;/code&gt;函数仅接受一个循环的主题并返回一个&lt;code&gt;LoopUnlessCond&lt;/code&gt;的实际例（囊括这个主体对象）。注意这个主题尚未执行。类&lt;code&gt;LoopUnlessCond&lt;/code&gt;有一个方法&lt;code&gt;unless&lt;/code&gt;，我们能用作&lt;em&gt;中缀操作符&lt;/em&gt;。这样，我们便为我们的新循环创造了一个相当自然的语法：&lt;code&gt;loop { &amp;lt; stats &amp;gt; } unless ( &amp;lt; cond &amp;gt; )&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;这里是&lt;code&gt;TargetTest2&lt;/code&gt;执行时的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i = 10
i = 9
i = 8
i = 7
i = 6
i = 5
i = 4
i = 3
i = 2
i = 1
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Scala 实例类</title>
   <link href="http://haoch.me/articles/scala-case-classes.html"/>
   <updated>2014-02-14T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-case-classes</id>
   <content type="html">&lt;p&gt;Scala支持 &lt;em&gt;实例类&lt;/em&gt; 的概念。实例类是普通类，可以导出他们的构造器参数，并且利用&lt;a href=&quot;pattern-matching.html&quot;&gt;模式匹配&lt;/a&gt;提供一种递归分解的机制。&lt;/p&gt;

&lt;p&gt;这里是一个类的层级的例子，由一个抽象父类&lt;code&gt;Term&lt;/code&gt;以及三个具体实例类&lt;code&gt;Var&lt;/code&gt;，&lt;code&gt;Fun&lt;/code&gt;，和&lt;code&gt;App&lt;/code&gt;组成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class Term
case class Var(name: String) extends Term
case class Fun(arg: String, body: Term) extends Term
case class App(f: Term, v: Term) extends Term
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个类层级可以用于表示&lt;a href=&quot;http://www.ezresult.com/article/Lambda_calculus&quot;&gt;无类型λ微积分&lt;/a&gt;。为了帮组实例类实例的创建，Scala不要求使用&lt;code&gt;new&lt;/code&gt;关键字。可以简单的将类名用作函数。&lt;/p&gt;

&lt;p&gt;这里有个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fun(&quot;x&quot;, Fun(&quot;y&quot;, App(Var(&quot;x&quot;), Var(&quot;y&quot;))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例类的构造器参数作为公开值并可以直接访问。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val x = Var(&quot;x&quot;)
println(x.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于每个实例类，Scala编译器生成一个实现结构相等的&lt;code&gt;equals&lt;/code&gt;方法和一个&lt;code&gt;toString&lt;/code&gt;方法。实例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val x1 = Var(&quot;x&quot;)
val x2 = Var(&quot;x&quot;)
val y1 = Var(&quot;y&quot;)
println(&quot;&quot; + x1 + &quot; == &quot; + x2 + &quot; =&amp;gt; &quot; + (x1 == x2))
println(&quot;&quot; + x1 + &quot; == &quot; + y1 + &quot; =&amp;gt; &quot; + (x1 == y1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将打印：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Var(x) == Var(x) =&amp;gt; true
Var(x) == Var(y) =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有当模式匹配是用于分解数据结构，定义实例类才是合理的。下面的对象为我们的λ微积分的表现方法定义了一个漂亮的打印函数
It makes only sense to define case classes if pattern matching is used to decompose data structures. The following object defines a pretty printer function for our lambda calculus representation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object TermTest extends scala.App {
  def printTerm(term: Term) {
    term match {
      case Var(n) =&amp;gt;
        print(n)
      case Fun(x, b) =&amp;gt;
        print(&quot;^&quot; + x + &quot;.&quot;)
        printTerm(b)
      case App(f, v) =&amp;gt;
        print(&quot;(&quot;)
        printTerm(f)
        print(&quot; &quot;)
        printTerm(v)
        print(&quot;)&quot;)
    }
  }
  def isIdentityFun(term: Term): Boolean = term match {
    case Fun(x, Var(y)) if x == y =&amp;gt; true
    case _ =&amp;gt; false
  }
  val id = Fun(&quot;x&quot;, Var(&quot;x&quot;))
  val t = Fun(&quot;x&quot;, Fun(&quot;y&quot;, App(Var(&quot;x&quot;), Var(&quot;y&quot;))))
  printTerm(t)
  println
  println(isIdentityFun(id))
  println(isIdentityFun(t))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们的例子中，函数&lt;code&gt;printTerm&lt;/code&gt;表达了一个模式匹配语句，已&lt;code&gt;match&lt;/code&gt;关键字
开头并且由一系列&lt;code&gt;case Pattern =&amp;gt; Body&lt;/code&gt;分句构成。
上述程序还定义了一个函数&lt;code&gt;isIdentityFun&lt;/code&gt;，用来检查是否给定的术语对应着一个简单恒等函数。这个例子采用深度模式和保护。给定值匹配一个模式后，保护（关键字&lt;code&gt;if&lt;/code&gt;后定义的）被执行。如果它返回&lt;code&gt;true&lt;/code&gt;，则匹配成功；否则，失败并且尝试下一个模式。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 类</title>
   <link href="http://haoch.me/articles/scala-classes.html"/>
   <updated>2014-02-13T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-classes</id>
   <content type="html">&lt;p&gt;Scala的类是指能够在运行时实例化为许多对象的静态模版。
这里是一个类的定义，定义类&lt;code&gt;Point&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Point(xc: Int, yc: Int) {
  var x: Int = xc
  var y: Int = yc
  def move(dx: Int, dy: Int) {
    x = x + dx
    y = y + dy
  }
  override def toString(): String = &quot;(&quot; + x + &quot;, &quot; + y + &quot;)&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个类定义两个变量&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;以及两个方法：&lt;code&gt;move&lt;/code&gt;和&lt;code&gt;toString&lt;/code&gt;。&lt;code&gt;move&lt;/code&gt;接受两个整数参数，但是不返回值（隐式返回类型&lt;code&gt;Unit&lt;/code&gt;，对应于类Java语言中的&lt;code&gt;void&lt;/code&gt;）。&lt;code&gt;toString&lt;/code&gt;，反而，不接受任何参数，但是返回一个&lt;code&gt;String&lt;/code&gt;值。由于&lt;code&gt;toString&lt;/code&gt;重载了预定义的&lt;code&gt;toString&lt;/code&gt;方法，它必须用&lt;code&gt;override&lt;/code&gt;标记。&lt;/p&gt;

&lt;p&gt;Scala中的类接受构造器参数。上面代码定义了两个构造器参数，&lt;code&gt;xc&lt;/code&gt;和&lt;code&gt;yc&lt;/code&gt;；他们都是整个类的主体中可见的。我们的例子里他们被用于初始化变量&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;类使用&lt;code&gt;new&lt;/code&gt;关键字初始化，如下面例子所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object Classes {
  def main(args: Array[String]) {
    val pt = new Point(1, 2)
    println(pt)
    pt.move(10, 10)
    println(pt)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个程序以有一个&lt;code&gt;main&lt;/code&gt;方法的顶层单例对象的形式定义了一个可执行的应用类。这个&lt;code&gt;main&lt;/code&gt;方法创建了一个新的&lt;code&gt;Point&lt;/code&gt;并存储在值&lt;code&gt;pt&lt;/code&gt;中。 &lt;em&gt;注意&lt;code&gt;val&lt;/code&gt;结构定义的值不同于以&lt;code&gt;var&lt;/code&gt;结构定义的变量（看上面的&lt;code&gt;Point&lt;/code&gt;类），它们不允许更改。也就是说值是常量&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这是程序的输入 &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1, 2)
(11, 12)
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 默认参量值</title>
   <link href="http://haoch.me/articles/scala-default-parameter-values.html"/>
   <updated>2014-02-12T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-default-parameter-values</id>
   <content type="html">&lt;p&gt;Scala提供为参量设置默认值的能力，可用于允许调用者省略他们的参量。&lt;/p&gt;

&lt;p&gt;Java中，会倾向于看到许多重载方法，只是为了给一个大的方法的特定参量提供默认值。这点在构造函数中尤为明显：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HashMap&amp;lt;K,V&amp;gt; {
  public HashMap(Map&amp;lt;? extends K,? extends V&amp;gt; m);
  /** Create a new HashMap with default capacity (16) 
    * and loadFactor (0.75) 
    */
  public HashMap();
  /** Create a new HashMap with default loadFactor (0.75) */
  public HashMap(int initialCapacity);
  public HashMap(int initialCapacity, float loadFactor);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里真的只有两个构造函数；一个接收另外一个映射，而一个接收一个容量和载入因数。第三个和第四个构造函数在那里是为了允许&lt;code&gt;HashMap&lt;/code&gt;的用户以大多数情况下可能最优的默认载入因数和容量来创建实例。&lt;/p&gt;

&lt;p&gt;更有问题的是默认使用的值同时存在于Javadoc&lt;em&gt;和&lt;/em&gt;代码中。很容易忘记保持更新。关于这一点典型的模式是添加到公开的常量中，它的值也会在Javadoc中显示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HashMap&amp;lt;K,V&amp;gt; {
  public static final int DEFAULT_CAPACITY = 16;
  public static final float DEFAULT_LOAD_FACTOR = 0.75;

  public HashMap(Map&amp;lt;? extends K,? extends V&amp;gt; m);
  /** Create a new HashMap with default capacity (16) 
    * and loadFactor (0.75) 
    */
  public HashMap();
  /** Create a new HashMap with default loadFactor (0.75) */
  public HashMap(int initialCapacity);
  public HashMap(int initialCapacity, float loadFactor);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然它使得我们避免重复自己，但是并不那么具有表现力。
Scala对此添加了直接的支持：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HashMap[K,V](initialCapacity:Int = 16, loadFactor:Float = 0.75) {
}

// Uses the defaults
val m1 = new HashMap[String,Int]

// initialCapacity 20, default loadFactor
val m2= new HashMap[String,Int](20)

// overriding both
val m3 = new HashMap[String,Int](20,0.8)

// override only the loadFactory via
// named arguments
val m4 = new HashMap[String,Int](loadFactor = 0.8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意我们能怎样通过使用&lt;a href=&quot;named-parameters.html&quot;&gt;命名参量&lt;/a&gt;发挥&lt;code&gt;任何&lt;/code&gt;默认值的优势。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 提取器对象</title>
   <link href="http://haoch.me/articles/scala-extractor-objects.html"/>
   <updated>2014-02-11T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-extractor-objects</id>
   <content type="html">&lt;p&gt;Scala中，模式可以独立于实例类定义。为此，一个名为unapply的方法被定义来生成一个所谓的提取器。例如，下面的代码定义了一个提取器对象Twice。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object Twice {
  def apply(x: Int): Int = x * 2
  def unapply(z: Int): Option[Int] = if (z%2 == 0) Some(z/2) else None
}

object TwiceTest extends App {
  val x = Twice(21)
  x match { case Twice(n) =&amp;gt; Console.println(n) } // prints 21
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里有两个语法约定在其作用。&lt;/p&gt;

&lt;p&gt;模式&lt;code&gt;case Twice(n)&lt;/code&gt;将会引起对&lt;code&gt;Twice.unapply&lt;/code&gt;的调用，它用来匹配任何偶数；&lt;code&gt;unapply&lt;/code&gt;的返回值表示参数是否匹配以及能够被后续匹配用到的任何子值。这里的子值是&lt;code&gt;z/2&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;方法&lt;code&gt;apply&lt;/code&gt;对于模式匹配不是必须的。它仅仅用于模拟一个构造函数。&lt;code&gt;val x = Twice(21)&lt;/code&gt;等价于&lt;code&gt;val x = Twice.apply(21)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;unapply&lt;/code&gt;的返回类型应该像下面这样选择：
* 如果仅仅是一个测试，则返回一个&lt;code&gt;Boolean&lt;/code&gt;。例如&lt;code&gt;case even()&lt;/code&gt;
* 如果返回类型T的单个子值，则返回一个&lt;code&gt;Option[T]&lt;/code&gt;
* 如果你想返回多个子值&lt;code&gt;T1,...,Tn&lt;/code&gt;，则将它们组合到一个课可选的元组&lt;code&gt;Option[T1,...,Tn]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有时，子值的数量是固定的，并且我们想返回一个序列。
为了这个原因，你也能通过&lt;code&gt;unapplySeq&lt;/code&gt;的方式定义模式。最后的子值类型&lt;code&gt;Tn&lt;/code&gt;必须为&lt;code&gt;Seq[S]&lt;/code&gt;。这一机制被用于模式&lt;code&gt;case List[x1, ..., xn]&lt;/code&gt;中的实例。&lt;/p&gt;

&lt;p&gt;提取器能够使得代码更易于维护。想要了解细节，阅读Emir, Odersky 和 Williams（2007年1月份）所写的论文 &lt;a href=&quot;http://lamp.epfl.ch/~emir/written/MatchingObjectsWithPatterns-TR.pdf&quot;&gt;“Matching Objects with Patterns”&lt;/a&gt; (看第四章节)。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala 范型类</title>
   <link href="http://haoch.me/articles/scala-generic-classes.html"/>
   <updated>2014-02-10T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-generic-classes</id>
   <content type="html">&lt;p&gt;类似Java 5(也称作 &lt;a href=&quot;http://java.sun.com/j2se/1.5/&quot;&gt;JDK 1.5&lt;/a&gt;)，Scala内置支持类的类型参数。这种范型类特别是对集合类的开发非常有用。
这里以一个例子说明这一点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Stack[T] {
  var elems: List[T] = Nil
  def push(x: T) { elems = x :: elems }
  def top: T = elems.head
  def pop() { elems = elems.tail }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类&lt;code&gt;Stack&lt;/code&gt;模拟一个任意元素类型&lt;code&gt;T&lt;/code&gt;的强制（可变的）的栈。类型参数确保仅合法的元素（即类型&lt;code&gt;T&lt;/code&gt;）可以被推入栈中。同样地，通过类型参数，我们可以表示方法&lt;code&gt;top&lt;/code&gt;将仅产生指定类型的元素。&lt;/p&gt;

&lt;p&gt;这里是一些用例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object GenericsTest extends App {
  val stack = new Stack[Int]
  stack.push(1)
  stack.push(&#39;a&#39;)
  println(stack.top)
  stack.pop()
  println(stack.top)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个程序的输入将会是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;97
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;注意：范型的子类型是*不可变的*。这意味着如果我们有一个&lt;code&gt;Stack[Char]&lt;/code&gt;类型的字符栈，那么它不能被用作一个&lt;code&gt;Stack[Int]&lt;/code&gt;类型的整数栈。这是不可靠的，因为它会使得我们能够将真正的整数输入到字符栈中。总的而言，当且仅当&lt;code&gt;S = T&lt;/code&gt;时，&lt;code&gt;Stack[T]&lt;/code&gt;只是&lt;code&gt;Stack[S]&lt;/code&gt;的一个子类型。因为这可能会非常局限的，Scala提供&lt;a href=&quot;variances.html&quot;&gt;类型参数标注机制&lt;/a&gt; 来控制范型的子类型行为。&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala抽象类型</title>
   <link href="http://haoch.me/articles/scala-abstract-types.html"/>
   <updated>2014-01-23T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-abstract-types</id>
   <content type="html">&lt;p&gt;Scala中，类可以按值（构造器参数）和按类型（如果类是&lt;em&gt;范型&lt;/em&gt;）传递参数。为了整齐的缘故，不仅仅可以把值作为对象成员，与值一起的类型也是对象的成员。此外，两种形式的成员都可以被具体化和抽象化。
这里有一个例子，同时将一个后面值的定义和一个抽象类型的定义作为&lt;code&gt;Buffer&lt;/code&gt;&lt;em&gt;类&lt;/em&gt;的成员。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;抽象类型&lt;/em&gt;是指定义不是明确已知的类型。在上述例子中，我们只能知道&lt;code&gt;Buffer&lt;/code&gt;类的每个对象都有一个类型成员&lt;code&gt;T&lt;/code&gt;，但是&lt;code&gt;Buffer&lt;/code&gt;类的定义不需要透露成员类型&lt;code&gt;T&lt;/code&gt;对应的具体类型。就像值的定义一样，我们能够在子类中重载类型定义。这允许我们通过绑定类型范围（即描述抽象类型可能的具体实例）透露关于抽象类型的更多信息&lt;/p&gt;

&lt;p&gt;在下面的程序中，我们派生出一个&lt;code&gt;SeqBuffer&lt;/code&gt;类，通过声明对于新的抽象类型&lt;code&gt;U&lt;/code&gt;类型&lt;code&gt;T&lt;/code&gt;必须是&lt;code&gt;Seq[U]&lt;/code&gt;的子类型，允许我们只能在缓存中存储序列：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeqBuffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;拥有抽象类型成员的特性或者&lt;em&gt;类&lt;/em&gt;通常被用在与匿名类实例的组合中。为了说明这一点，我们现在看一个处理指向整数列表的序列缓存的程序，&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntSeqBuffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeqBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractTypeTest1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newIntSeqBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IntSeqBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntSeqBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newIntSeqBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;length = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;方法&lt;code&gt;newIntSeqBuf&lt;/code&gt;的返回类型引用一个特殊的&lt;code&gt;Buffer&lt;/code&gt;，其中类型&lt;code&gt;U&lt;/code&gt;现在等价于&lt;code&gt;Int&lt;/code&gt;。我们在方法&lt;code&gt;newIntSeqBuf&lt;/code&gt;的主体中匿名类实例里面有一个类似的类型别名。这里我们创建&lt;code&gt;IntSeqBuffer&lt;/code&gt;的一个实例，其中类型&lt;code&gt;T&lt;/code&gt;引用&lt;code&gt;List[Int]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;请注意经常可以将抽象类型成员转化为类的类型参数，反之亦然。这里是上述代码的一个只使用类型参数的版本：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeqBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;+T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractTypeTest2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newIntSeqBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SeqBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeqBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newIntSeqBuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;length = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意我们这里必须使用&lt;em&gt;型变注释&lt;/em&gt;；否则我们不能隐藏方法&lt;code&gt;newIntSeqBuf&lt;/code&gt;的返回对象的具体序列实现类型。此外，也有不能将抽象类型替换为类型参数的情况。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;译自: &lt;a href=&quot;http://docs.scala-lang.org/tutorials/tour/abstract-types.html&quot;&gt;http://docs.scala-lang.org/tutorials/tour/abstract-types.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Java程序员的Scala指南</title>
   <link href="http://haoch.me/articles/scala-for-java-programmer.html"/>
   <updated>2014-01-22T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/scala-for-java-programmer</id>
   <content type="html">&lt;p&gt;作者：Michel Schinz and Philipp Haller 译者：&lt;a href=&quot;http://haoch.me&quot;&gt;陈浩&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;本文档是对Scala语言及其编译器的一个快速介绍。目标读者是已经有一定编程经验，并希望大概了解一下Scala可以用来做什么。本文默认读者已具备面向对象尤其是Java的基础知识。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;第一个示例&lt;/h3&gt;

&lt;p&gt;作为第一个例子，我们将使用&lt;em&gt;Hello World&lt;/em&gt;程序。
也许它并不是非常吸引人的，但是可以很容易在不需要对这门语言太多了解的情况下展示Scala工具的用法。内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object HelloWorld {
  def main(args: Array[String]) {
    println(&quot;Hello, world!&quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于Java程序员，这个结构应该非常熟悉：它由一个叫&lt;code&gt;main&lt;/code&gt;的方法组成，以命令行参数，即一个字符串数组，作为参量；这个方法的主体是对预定义方法&lt;code&gt;println&lt;/code&gt;的单一调用，并以友好的问候作为参数。这个&lt;code&gt;main&lt;/code&gt;方法不返回值(它是一个过程方法)，因此，没必要申明返回类型。&lt;/p&gt;

&lt;p&gt;对于Java程序员，不熟悉的是包含&lt;code&gt;main&lt;/code&gt;方法的&lt;code&gt;object&lt;/code&gt;的声明。这种声明方式，通常称之为&lt;em&gt;单例对象&lt;/em&gt;，是指只有单一实例的类。以上声明了一个名为&lt;code&gt;HelloWorld&lt;/code&gt;的类以及这个类的一个实例，同样叫&lt;code&gt;HelloWorld&lt;/code&gt;，这个实例需要时才会创建，即第一次被使用的时候。&lt;/p&gt;

&lt;p&gt;机敏的读者也许注意到这里&lt;code&gt;main&lt;/code&gt;方法没有声明为&lt;code&gt;static&lt;/code&gt;。因为Scala中不存在静态成员（方法或者字段）。与其定义静态成员，Scala程序员会在单例对象中定义他们。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;编译示例&lt;/h3&gt;

&lt;p&gt;我们利用&lt;code&gt;scalac&lt;/code&gt;，即Scala编译器，来编译这个例子。&lt;code&gt;scalac&lt;/code&gt;工作原理与大多数编译器类似：它以一个源文件作为参数，可能带有一些选项，然后生成一个或者多个对象文件。这些生成的对象文件是标准的Java class文件。&lt;/p&gt;

&lt;p&gt;如果我们将上述程序保存到一个叫&lt;code&gt;HelloWorld.scala&lt;/code&gt;的文件中，我们便能通过输入以下命令编译它（这个大于符号&lt;code&gt;&amp;gt;&lt;/code&gt;表示命令行提示，不要输入）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; scalac HelloWorld.scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个命令会当前目录中生成一些class文件。其中有一个叫&lt;code&gt;HelloWorld.class&lt;/code&gt;，它包含了能够直接使用&lt;code&gt;scala&lt;/code&gt;命令执行的类，如下文所述。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;运行示例&lt;/h3&gt;

&lt;p&gt;一旦被编译，Scala程序就可以通过&lt;code&gt;scala&lt;/code&gt;命令运行。
它的用法与&lt;code&gt;java&lt;/code&gt;命令用来运行java程序非常类似，并接受相同的选项。以上示例能够利用以下命令执行，并产生预期输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; scala -classpath . HelloWorld

Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;java&quot;&gt;与Java交互&lt;/h2&gt;

&lt;p&gt;Scala的优势之一是易于与Java代码交互。所有&lt;code&gt;java.lang&lt;/code&gt;包下面的类默认被引入，其他的则需要显式引入。&lt;/p&gt;

&lt;p&gt;让我们来看一个例子展示这一点。我们希望根据特定国家，比如法国，的惯例获取并格式化当前日期。（其他地区比如瑞士的法语区遵循相同的惯例。）&lt;/p&gt;

&lt;p&gt;Java的类库定义了许多强大的工具类，如Date和DateFormat。因为Scala可以与Java无缝交互，所以没必要在Scala类库中实现相同的类–我们可以简单地引入对应Java包的类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.util.{Date, Locale}
import java.text.DateFormat
import java.text.DateFormat._

object FrenchDate {
  def main(args: Array[String]) {
    val now = new Date
    val df = getDateInstance(LONG, Locale.FRANCE)
    println(df format now)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scala的引入语句与Java的看起来非常相似，然而，它更加强大。
同一个包的多个类可以通过将他们放的花括号中同时引入，就像第一行。另一个不同在于引入一个包或者class的所有成员时，应该使用下划线字符（&lt;code&gt;_&lt;/code&gt;）而非星号（&lt;code&gt;*&lt;/code&gt;）。因为星号是一个合法的Scala标识符（如方法名），我们将稍后提到。&lt;/p&gt;

&lt;p&gt;第三行的引入语句引入了&lt;code&gt;DateFormat&lt;/code&gt;类的所有成员，这使得静态方法&lt;code&gt;getDateInstance&lt;/code&gt;和静态字段&lt;code&gt;LONG&lt;/code&gt;直接可见。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;main&lt;/code&gt;方法中，我们首先创建一个Java的&lt;code&gt;Date&lt;/code&gt;类实例，它默认包含当前日期。然后，我们通过前面引入的静态方法&lt;code&gt;getDateInstance&lt;/code&gt;定义一个日期格式。最后，我们将根据对应区域的&lt;code&gt;DateFormat&lt;/code&gt;的实例格式化后的当前日期打印出来。最后一行显示Scala语法的一个有趣的属性。接受一个参数的方法能够以中缀语法使用。表达式如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df format now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仅仅是以下表达式略微精简的另一种写法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df.format(now)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这似乎是一个微不足道的语法细节，但是具有重要的影响，其中之一将在下节探讨。&lt;/p&gt;

&lt;p&gt;结束关于Java交互的这一节之前，值得注意的是在Scala中也可以直接继承Java类和实现Java接口。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;一切都是对象&lt;/h2&gt;

&lt;p&gt;Scala是一门纯面向对象的语言，因为&lt;em&gt;一切&lt;/em&gt;都是对象，包括数字或者函数。它与Java有所不同，Java区分原始类型（例如&lt;code&gt;boolean&lt;/code&gt;和&lt;code&gt;int&lt;/code&gt;）和引用类型，而且不能够将函数当为值来操作。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;数字是对象&lt;/h2&gt;

&lt;p&gt;因为数字是对象，所以它们也有方法。而且事实上，如下这样一个算术表达式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 + 2 * 3 / x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;专门由方法调用组成，因为它等价于下面的表达式，正如上节所述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1).+(((2).*(3))./(x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这也意味着&lt;code&gt;+&lt;/code&gt;，&lt;code&gt;*&lt;/code&gt;等在Scala中均是合法的标识符。&lt;/p&gt;

&lt;p&gt;第二版本中数字周围的圆括号是必须的，因为Scala的词法分析器采用最长匹配规则来处理分词。因此，以下表达式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.+(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将被拆分成单词&lt;code&gt;1.&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;和 &lt;code&gt;2&lt;/code&gt;。选择这种分词方式的原因在于&lt;code&gt;1.&lt;/code&gt;相对与&lt;code&gt;1&lt;/code&gt;是一个更长的合法匹配。单词&lt;code&gt;1.&lt;/code&gt;被解析成了文本&lt;code&gt;1.0&lt;/code&gt;，进而变成一个&lt;code&gt;Double&lt;/code&gt;而非&lt;code&gt;Int&lt;/code&gt;。像这样写这个表达式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1).+(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可避免&lt;code&gt;1&lt;/code&gt;被解析成&lt;code&gt;Double&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;函数是对象&lt;/h3&gt;

&lt;p&gt;也许对于Java程序员，更惊讶的是Scala中函数也是对象。这因此使得将函数作为参数传递，以变量存储，以及从其他函数中返回，成为了可能。这种将函数当作值操作的能力是一个非常有趣的被称之为&lt;code&gt;函数式编程(functional programming)&lt;/code&gt;的编程范式的基础之一。&lt;/p&gt;

&lt;p&gt;我们以一个非常简单的用于在每秒执行某个行为的定时器函数为例，说明为什么将函数作为值使用是有用的。
我们如何传递给它这个行为以执行呢？非常合乎逻辑的是作为一个函数。这类非常简单的函数传递对于许多程序员而言应该很熟悉：经常被用于用户接口代码，用来注册当某些事件发生时被调用的回调函数，。&lt;/p&gt;

&lt;p&gt;在下面的程序中，这个计时器函数叫做&lt;code&gt;oncePerSecond&lt;/code&gt;，它以一个回调函数作为参数。这个函数的类型写作&lt;code&gt;() =&amp;gt; Unit&lt;/code&gt;，指所有无需参数并且不返回任何值的函数的类型（类型&lt;code&gt;Unit&lt;/code&gt;类似于C/C++中的&lt;code&gt;void&lt;/code&gt;）。这个程序的主函数简单调用这个计时器函数，并传入在终端中打印一句话的回调函数。换言之，这个程序不断地每秒打印一次这句”time flies like an arrow”（光阴似箭）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object Timmer {
	def oncePerSecond(callback:() =&amp;gt; Unit) {
		while(true) { callback();Thread sleep 1000 }
	}
	def timeFlies(){
		println(&quot;time flies like an arrow...&quot;)
	}
	def main(args: Array[String]){
		oncePerSecond(timeFlies)
	}
}	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意为了打印这个字符串，我们使用了预定义的方法&lt;code&gt;println&lt;/code&gt;而非&lt;code&gt;System.out&lt;/code&gt;中的那个。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;匿名函数&lt;/h4&gt;

&lt;p&gt;虽然这个程序已经非常易于理解，但依然可略微优化一下。
首先，注意函数&lt;code&gt;timeFlies&lt;/code&gt;仅仅是为了后面传给&lt;code&gt;oncePerSecond&lt;/code&gt;函数而定义。对只被使用一次的函数命名也许并非必要的，事实上，能够仅仅在被传入&lt;code&gt;oncePerSecond&lt;/code&gt;时构造这个函数会更好。Scala中，使用&lt;em&gt;匿名函数&lt;/em&gt;可以做到这点，准确来讲：没有名字的函数。修订版本的计时器程序的采用匿名函数代替&lt;em&gt;timeFlies&lt;/em&gt;，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object TimerAnonymous {
  def oncePerSecond(callback: () =&amp;gt; Unit) {
    while (true) { callback(); Thread sleep 1000 }
  }
  def main(args: Array[String]) {
    oncePerSecond(() =&amp;gt;
      println(&quot;time flies like an arrow...&quot;))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子中匿名函数是通过右箭头&lt;code&gt;=&amp;gt;&lt;/code&gt;声明的，将函数的参数列表与主体分离。在这个例子中，由箭头左侧那对空的圆括号可见，参数列表为空。函数的主体与上面的&lt;code&gt;timeFlies&lt;/code&gt;相同。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;类&lt;/h2&gt;

&lt;p&gt;如我们上述所见，Scala是一门面向对象语言，它同样有类的概念。（为了完整性，应该注意到有些面向对象语言没有类的概念，但Scala不是其中之一）
Scala中的类采用近似Java语法的方式声明。一个重要的不同点在于Scala中的类允许有参数，由下面这个复数的定义可见。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Complex(real: Double, imaginary: Double) {
  def re() = real
  def im() = imaginary
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个复数类有两个参数，即复数的实数和虚数部分。这些参数必须在创建&lt;code&gt;Complex&lt;/code&gt;类的实例时传递，比如：&lt;code&gt;new Complex(1.5,2.3)&lt;/code&gt;。这个类包含两个方法，名为&lt;code&gt;re&lt;/code&gt;和&lt;code&gt;im&lt;/code&gt;，提供对这两部分的访问。&lt;/p&gt;

&lt;p&gt;应该注意到这两个方法的返回类型没有显式给出。编译器会自动推测，它会看这些方法的右侧并推测出都返回一个&lt;code&gt;Doube&lt;/code&gt;类型的值。&lt;/p&gt;

&lt;p&gt;编译器并不是总能够像这样推测出类型，而且不幸的是也没有简单的规则可以准确的知道，什么时候能什么时候不能。事实上，这通常并不是问题，因为当不能推测出没有显式指定的类型时，编译器会发出警告。有一个简单的规则，Scala的初学者应该尝试省略似乎易于从上下文中推断出来的类型声明，并且看是否编译器认可。一段时间后，这个程序员应该会对何时省略类型何时显式指定类型有一个好的理解。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;无参方法&lt;/h3&gt;

&lt;p&gt;方法&lt;code&gt;re&lt;/code&gt;和&lt;code&gt;im&lt;/code&gt;存在一个小问题，为了调用他们，必须将一对空的圆括号紧跟在他们名字后面，如下面这个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object ComplexNumbers {
  def main(args: Array[String]) {
    val c = new Complex(1.2, 3.4)
    println(&quot;imaginary part: &quot; + c.im())
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果能够像他们是字段一样，访问实数和虚数部分，而无需加上这对空的圆括号将会更好。这在Scala中完全可行的，只需简单地将它们定义为&lt;em&gt;无参数&lt;/em&gt;方法即可。这类方法不同于有零个参数的方法，他们名字后面不需要圆括号，无论是定义还是使用。我们的&lt;code&gt;Complex&lt;/code&gt;类可以像下面这样重写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Complex(real: Double, imaginary: Double) {
  def re = real
  def im = imaginary
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-10&quot;&gt;继承和重载&lt;/h3&gt;

&lt;p&gt;Scala中所有的类都继承至一个父类。当没有指定父类时，如上一节的&lt;code&gt;Complex&lt;/code&gt;例子，隐式默认使用&lt;code&gt;scala.AnyRef&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Scala中可以重载继承至父类的方法。然而强制需要使用&lt;code&gt;override&lt;/code&gt;修饰符显式指定一个方法重载了另一个，以免意外重载。例如，我们的&lt;code&gt;Complex&lt;/code&gt;类可以通过重定义继承至&lt;code&gt;Object&lt;/code&gt;的&lt;code&gt;toString&lt;/code&gt;方法来扩展。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Complex(real: Double, imaginary: Double) {
  def re = real
  def im = imaginary
  override def toString() =
    &quot;&quot; + re + (if (im &amp;lt; 0) &quot;&quot; else &quot;+&quot;) + im + &quot;i&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-11&quot;&gt;实例类和模式匹配&lt;/h2&gt;

&lt;p&gt;有一种经常在程序中出现的数据结构是树。例如，解析器和编译器经常在程序内部表示树；XML文档是树；而且很多类型的容器是基于树，如红黑树。&lt;/p&gt;

&lt;p&gt;我们现在将通过一个计算器的小程序来检测在Scala中这些树如何表示和操作。这个程序的目的是操作由和，整数常数和变量组成的非常小的代数表达式。这类表达式的两个例子是：&lt;code&gt;1+2&lt;/code&gt;和&lt;code&gt;(x+x)+(7+y)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;首先，我们需要决定这些表达式的表示方法。最自然的便可想到树，节点代表操作（这里是指加法）而叶子代表值（这里是指常数和变量）。&lt;/p&gt;

&lt;p&gt;Java中，这样一个树会用树的抽象父类，以及节点或者叶子各自一个具体的子类来表示。在函数式语言中，则会用一个代数数据类型来达到相同的目的。Scala提供&lt;em&gt;实例类&lt;/em&gt;的概念，某种程度上介于两者之间。以下便是我们的例子中如何利用他们来定义树的类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract class Tree
case class Sum(l: Tree, r: Tree) extends Tree
case class Var(n: String) extends Tree
case class Const(v: Int) extends Tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些类&lt;code&gt;Sum&lt;/code&gt;，&lt;code&gt;Var&lt;/code&gt;和&lt;code&gt;Const&lt;/code&gt;被声明为实例类，意味着他们与标准类存在着许多方面的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建这些类的实例不需要强制使用&lt;code&gt;new&lt;/code&gt;关键字（即，可以写作&lt;code&gt;Const(5)&lt;/code&gt;，而非&lt;code&gt;new Const(5)&lt;/code&gt;），&lt;/li&gt;
  &lt;li&gt;构造器参数的getter函数自动定义（即，可以通过&lt;code&gt;c.v&lt;/code&gt;获取&lt;code&gt;Const&lt;/code&gt;类的某个实例&lt;code&gt;c&lt;/code&gt;的构造器参数&lt;code&gt;v&lt;/code&gt;的值），&lt;/li&gt;
  &lt;li&gt;方法&lt;code&gt;equals&lt;/code&gt;和&lt;code&gt;hasCode&lt;/code&gt;默认提供定义，作用于实例的&lt;em&gt;结构&lt;/em&gt;而非他们本身。&lt;/li&gt;
  &lt;li&gt;方法&lt;code&gt;toString&lt;/code&gt;默认提供定义，并且以&lt;code&gt;源格式&lt;/code&gt;打印其值（如，表达式&lt;code&gt;x+1&lt;/code&gt;的树结构可打印为&lt;code&gt;Sum(Var(x),Const(1))&lt;/code&gt;）&lt;/li&gt;
  &lt;li&gt;这些类的实例能通过&lt;em&gt;模式匹配(pattern-matching)&lt;/em&gt;分解，正如后面将要看到的.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至此我们已经定义了表示我们的代数表达式的数据类型，我们能够开始定义操作来控制他们。我们将从一个在某&lt;code&gt;环境(environment)&lt;/code&gt;下计算一个表达式的函数开始。这个环境的目的是指定变量的值。例如，表达式&lt;code&gt;x+1&lt;/code&gt;在一个将&lt;code&gt;5&lt;/code&gt;和&lt;code&gt;x&lt;/code&gt;关联，写作&lt;code&gt;{ x -&amp;gt; 5 }&lt;/code&gt;，的环境下结果为&lt;code&gt;6&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此我们必须找到一个方式表示环境。我们当然可以使用一些关联的数据结构，比如散列表（hash table）。但是我们也能直接的使用函数！一个环境真的仅仅只不过是一个函数而已，它将一个值与一个（变量）名称关联。上面提到的环境&lt;code&gt;{ x -&amp;gt; 5 }&lt;/code&gt;在Scala 中可以简单的写成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ case &quot;x&quot; =&amp;gt; 5 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个语句定义了一个函数，当传入字符串&lt;code&gt;&quot;x&quot;&lt;/code&gt;作为参数时，它返回整数&lt;code&gt;5&lt;/code&gt;，否则失败并抛出一个异常。&lt;/p&gt;

&lt;p&gt;在写这个计算函数之前，让我们给这个环境的类型命个名。当然我们总能够使用&lt;code&gt;String =&amp;gt; Int&lt;/code&gt;作为环境的类型，但是如果我们为这个类型引入一个名称，程序将得以简化，后续修改也变得更加容易。Scala中可通过以下语句实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Environment = String =&amp;gt; Int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此后，这个&lt;code&gt;Environment&lt;/code&gt;类型可用作从&lt;code&gt;String&lt;/code&gt;到&lt;code&gt;Int&lt;/code&gt;的函数类型的一个别名。&lt;/p&gt;

&lt;p&gt;我们现在可以给出这个计算函数的定义了。
从概念上来讲，非常简单：两个表达式的和的值就是两个表达式的值的和；一个变量的值直接从环境获得；一个常数的值就是常数本身。在Scala中表达这些并不更难：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def eval(t: Tree, env: Environment): Int = t match {
  case Sum(l, r) =&amp;gt; eval(l, env) + eval(r, env)
  case Var(n)    =&amp;gt; env(n)
  case Const(v)  =&amp;gt; v
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个计算函数通过在树&lt;code&gt;t&lt;/code&gt;上执行&lt;em&gt;模式匹配（pattern matching）&lt;/em&gt;来实现功能。直观地来讲，以上定义应该相当清楚：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先，检查这个树&lt;code&gt;t&lt;/code&gt;是否是一个&lt;code&gt;Sum&lt;/code&gt;，如果是，则将左边子树绑定至一个新的名为&lt;code&gt;l&lt;/code&gt;的变量，而右边子树至一个名为&lt;code&gt;r&lt;/code&gt;的变量，然后利用箭头后的表达式的计算来处理；这个表达式能够（并且确实）使用了箭头左侧的模式所约定的变量，即，&lt;code&gt;l&lt;/code&gt;和&lt;code&gt;r&lt;/code&gt;，&lt;/li&gt;
  &lt;li&gt;如果第一次检查不成功，也就是，如果树不是一个&lt;code&gt;Sum&lt;/code&gt;，将继续检查&lt;code&gt;t&lt;/code&gt;是否是一个&lt;code&gt;Var&lt;/code&gt;；如果是，则将&lt;code&gt;Var&lt;/code&gt;节点中的名称绑定至一个变量&lt;code&gt;n&lt;/code&gt;，然后采用右边表达式处理，&lt;/li&gt;
  &lt;li&gt;如果到第二次检查也失败了，也就是，如果&lt;code&gt;t&lt;/code&gt;不是一个&lt;code&gt;Sum&lt;/code&gt;也不是一个&lt;code&gt;Var&lt;/code&gt;，将检查是否是一个&lt;code&gt;Const&lt;/code&gt;，如果是，则将&lt;code&gt;Const&lt;/code&gt;节点中的值绑定至一个变量&lt;code&gt;v&lt;/code&gt;并利用右边处理，&lt;/li&gt;
  &lt;li&gt;最后，如果所有检查失败，将抛出一个异常，标志着这个模式匹配表达式失败；这里仅可能在更多&lt;code&gt;Tree&lt;/code&gt;的子类被声明的情况下。	&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们看到模式匹配的基本思想是企图在一系列的模式中匹配一个值，并且只要某一个模式匹配上，便提取并命名这个值的各个部分，然后最终执行某些代码，典型的代码是调用这些被命名的部分。&lt;/p&gt;

&lt;p&gt;经验丰富的面向对象程序员也许想知道为何我们不定义&lt;code&gt;eval&lt;/code&gt;作为&lt;code&gt;Tree&lt;/code&gt;类及其子类的一个&lt;em&gt;方法（method）&lt;/em&gt;。事实上，我们也可以这么做，因为Scala允许在实例类中定义方法，就像普通类一样。决定使用模式匹配还是方法，因此虽然可能只是一个喜好的问题，但是在扩展性上具有重要涵义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当使用方法时，像这样增加一个新类型的节点很容易，只需要为之定义一个&lt;code&gt;Tree&lt;/code&gt;的子类；否则，增加一个新的操作来操控这个树会非常繁琐，因为需要修改&lt;code&gt;Tree&lt;/code&gt;的所有子类，&lt;/li&gt;
  &lt;li&gt;当使用模式匹配时，情况便逆转了：增加一个新类型的节点需要修改树中所有的执行模式匹配的函数，以将新的节点考虑进来；否则，增加一个新的操作很容易，只需要定义一个独立的函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了进一步探讨模式匹配，让我们定义另一个代数表达式的操作：符号求导（symbolic derivation）。读者可能记得这个操作的下述规则：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;和的导数是导数的和&lt;/li&gt;
  &lt;li&gt;某个变量&lt;code&gt;v&lt;/code&gt;的导数在&lt;code&gt;v&lt;/code&gt;是与求导过程相关的变量时为1，否则为0&lt;/li&gt;
  &lt;li&gt;常数的导数为0.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些规则几乎可以逐字翻译为Scala代码，得到的定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def derive(t: Tree, v: String): Tree = t match {
  case Sum(l, r) =&amp;gt; Sum(derive(l, v), derive(r, v))
  case Var(n) if (v == n) =&amp;gt; Const(1)
  case _ =&amp;gt; Const(0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个函数介绍了模式匹配的两个新的概念。首先，变量的&lt;code&gt;case&lt;/code&gt;表达式有一层&lt;em&gt;保护（guard）&lt;/em&gt;，即&lt;code&gt;if&lt;/code&gt;关键字之后的那个表达式。这层保护可以阻止除非这个表达式为真的情况下成功地模式匹配。我们这里是用来确保只有被求导的变量名与派生变量&lt;code&gt;v&lt;/code&gt;相同的情况下，才返回常数&lt;code&gt;1&lt;/code&gt;。这里用到的第二个模式匹配的新特性是&lt;em&gt;通配符(wildcard)&lt;/em&gt;，写作&lt;code&gt;_&lt;/code&gt;，这个模式可以匹配任何值，不需要指定名称。&lt;/p&gt;

&lt;p&gt;虽然我们还没有探索完模式匹配的所有功能，但是为了控制篇幅，我们就此浅尝则止。我们依然想了解一下以上两个函数在实例中表现如何。为了这个目的，让我们写一个简单的&lt;code&gt;main&lt;/code&gt;函数，根据表达式&lt;code&gt;(x+x)+(7+y)&lt;/code&gt;执行这几步操作：首先计算它在&lt;code&gt;{ x -&amp;gt; 5, y -&amp;gt; 7 }&lt;/code&gt;的环境下的值，然后分别计算对&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;的导数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def main(args: Array[String]) {
  val exp: Tree = Sum(Sum(Var(&quot;x&quot;),Var(&quot;x&quot;)),Sum(Const(7),Var(&quot;y&quot;)))
  val env: Environment = { case &quot;x&quot; =&amp;gt; 5 case &quot;y&quot; =&amp;gt; 7 }
  println(&quot;Expression: &quot; + exp)
  println(&quot;Evaluation with x=5, y=7: &quot; + eval(exp, env))
  println(&quot;Derivative relative to x:\n &quot; + derive(exp, &quot;x&quot;))
  println(&quot;Derivative relative to y:\n &quot; + derive(exp, &quot;y&quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行这个程序，我们得到这些期望的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Expression: Sum(Sum(Var(x),Var(x)),Sum(Const(7),Var(y)))
Evaluation with x=5, y=7: 24
Derivative relative to x:
 Sum(Sum(Const(1),Const(1)),Sum(Const(0),Const(0)))
Derivative relative to y:
 Sum(Sum(Const(0),Const(0)),Sum(Const(0),Const(1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过测试这个输出，我们看到导数结果应该在呈现给用户之前简化一下。
使用模式匹配定义一个基本的简化函数是个有趣的（但是极其微妙的）的问题，
留给读者作为练习。&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;特性&lt;/h2&gt;

&lt;p&gt;除了从父类继承代码之外，Scala类也从一个或者多个&lt;em&gt;特性（Traits）&lt;/em&gt;引入代码。&lt;/p&gt;

&lt;p&gt;也许对于Java程序员而言，理解&lt;em&gt;特性&lt;/em&gt;是什么最简单的方式是将它们看作能够包含代码的接口。
Scala中，当一个类继承一个特性时，它实现这个特新的接口，同时继承这个特新包含的所有代码。&lt;/p&gt;

&lt;p&gt;为了展示特性的有用之处，我们看一个经典的例子：有序对象。能够在给定类的对象之间进行比较是通常是很有用的，比如对他们进行排序。Java中，可比较的对象继承接口&lt;code&gt;Comparable&lt;/code&gt;。Scala中，我们能够比Java中做得稍微好点，将等价的&lt;code&gt;Comparable&lt;/code&gt;定义为特性，称为&lt;code&gt;Ord&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;比较对象的时候，六个不同的谓语是有用的：小于，小于或等于，等于，不等于，大于或等于，以及大于。然而，将它们全部定义一遍属于下策，特别是这六个中的四个可以用剩下的两个来表示。也就是给出等于和小于（假设），其他的都可以表示。Scala中，所有这些观察结果均可以通过以下trait的声明涵盖：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Ord {
  def &amp;lt; (that: Any): Boolean
  def &amp;lt;=(that: Any): Boolean =  (this &amp;lt; that) || (this == that)
  def &amp;gt; (that: Any): Boolean = !(this &amp;lt;= that)
  def &amp;gt;=(that: Any): Boolean = !(this &amp;lt; that)
}	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;抽象来讲，这个定义创建了一个叫&lt;code&gt;Ord&lt;/code&gt;的新类型，担任与Java的&lt;code&gt;Comparable&lt;/code&gt;相同的角色，同时根据第四个默认定义了其他三个谓语。等于和不等于的谓语这里并没出现，因为他们默认包含在所有对象中。&lt;/p&gt;

&lt;p&gt;上面用到的类型&lt;code&gt;Any&lt;/code&gt;是Scala中所有其他类型的父类型。可看作比Java的&lt;code&gt;Object&lt;/code&gt;类型更泛化的版本，因为它也是基础类型比如&lt;code&gt;Int&lt;/code&gt;，&lt;code&gt;Float&lt;/code&gt;等的父类型。&lt;/p&gt;

&lt;p&gt;为了使得一个类的对象是可比的，定义检测等于和不等于的谓语，然后和上述&lt;code&gt;Ord&lt;/code&gt;类混合就可以充分满足。我们以定义一个&lt;code&gt;Date&lt;/code&gt;类表示格列高利历（阳历）为例。这样的日期由日，月和年组成，我们都用整数表示。因此我们像下面这样定义这个&lt;code&gt;Date&lt;/code&gt;类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Date(y: Int, m: Int, d: Int) extends Ord {
  def year = y
  def month = m
  def day = d
  override def toString(): String = year + &quot;-&quot; + month + &quot;-&quot; + day
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的重要部分是类名和参数之后&lt;code&gt;extends Ord&lt;/code&gt;的声明，它声明了&lt;code&gt;Date&lt;/code&gt;类继承至&lt;code&gt;Ord&lt;/code&gt;特性。&lt;/p&gt;

&lt;p&gt;接下来，我们重新定义继承至&lt;code&gt;Object&lt;/code&gt;的&lt;code&gt;equals&lt;/code&gt;方法，以便可以通过比较各个字段来正确地比较日期。&lt;code&gt;equals&lt;/code&gt;的默认实现是不可用的，因为Java中它比较对象本身。我们的定义是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override def equals(that: Any): Boolean =
  that.isInstanceOf[Date] &amp;amp;&amp;amp; {
    val o = that.asInstanceOf[Date]
    o.day == day &amp;amp;&amp;amp; o.month == month &amp;amp;&amp;amp; o.year == year
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法利用了预定义的&lt;code&gt;isInstanceOf&lt;/code&gt;和&lt;code&gt;asInstanceOf&lt;/code&gt;方法。第一个，&lt;code&gt;isInstanceOf&lt;/code&gt;，对应Java的&lt;code&gt;instanceOf&lt;/code&gt;操作，并在当且仅当它所应用的对象是给出类型的实例才返回真。第二个，&lt;code&gt;asInstanceOf&lt;/code&gt;，对应Java的转换操作：如果对象是给出类型的实例，则当作这个类型看待，否则抛出&lt;code&gt;ClassCastException&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后，要定义的最后一个方法是检测小于的谓语，如下。用到了另一个预定义的方法&lt;code&gt;error&lt;/code&gt;，它抛出给定错误消息的异常。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def &amp;lt;(that: Any): Boolean = {
  if (!that.isInstanceOf[Date])
    error(&quot;cannot compare &quot; + that + &quot; and a Date&quot;)

  val o = that.asInstanceOf[Date]
  (year &amp;lt; o.year) ||
  (year == o.year &amp;amp;&amp;amp; (month &amp;lt; o.month ||
                     (month == o.month &amp;amp;&amp;amp; day &amp;lt; o.day)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这也完成了对&lt;code&gt;Date&lt;/code&gt;类的定义。这个类的实例可被视为日期或者可比较对象。此外，它们定义了上面提到的离歌比较谓语：&lt;code&gt;equals&lt;/code&gt;和&lt;code&gt;&amp;lt;&lt;/code&gt;，因为他们直接出现在&lt;code&gt;Date&lt;/code&gt;类和其他的的定义中，因为他们都继承至&lt;code&gt;Ord&lt;/code&gt;特性。&lt;/p&gt;

&lt;p&gt;当然，特性在其他场景中比这里展示的更加有用，但是深入讨论它们的应用超出了本文的范围。&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;泛型&lt;/h2&gt;

&lt;p&gt;本指南要探讨的最后一个Scala的特性是&lt;em&gt;范型(Genericity)&lt;/em&gt;。Java程序员应该能最为清楚他们的语言中因缺少范型所造成的困难，直到Java 1.5这一缺陷才被完善。&lt;/p&gt;

&lt;p&gt;范型是指能够代码中允许以类型作为参数的能力。例如，一个程序员写一个链表的库，会面临一个问题，他需要决定赋予这个链表的元素哪一种类型。因为这个链表打算用于许多不同的上下文场景中，不可能确定元素必须属于的特定类型，假设&lt;code&gt;Int&lt;/code&gt;。这完全是随意的而且过于限制的。&lt;/p&gt;

&lt;p&gt;Java程序员往往借助于&lt;code&gt;Object&lt;/code&gt;，它是所有对象的父类型。然而这种解决方案远不理想，因为对于基本类型（&lt;code&gt;int&lt;/code&gt;，&lt;code&gt;long&lt;/code&gt;，&lt;code&gt;float&lt;/code&gt;等）是无效的，而且意味着程序员必须插入大量的动态类型转换。&lt;/p&gt;

&lt;p&gt;Scala能够通过定义范型类（和方法）来解决这个问题。让我们用一个尽可能简单的容器类的例子来测试：一个引用，可以为空或者执行某种类型的一个对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Reference[T] {
  private var contents: T = _
  def set(value: T) { contents = value }
  def get: T = contents
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个&lt;code&gt;Reference&lt;/code&gt;类以一个类型为参数，称之为&lt;code&gt;T&lt;/code&gt;,即元素的类型。这个类型在这个类的主体中用作变量&lt;code&gt;content&lt;/code&gt;的类型，&lt;code&gt;set&lt;/code&gt;方法的参数以及&lt;code&gt;get&lt;/code&gt;函数的返回类型。&lt;/p&gt;

&lt;p&gt;上面的代码实例引进了Scala的变量，不需要进一步解释了。然而有趣的是看到赋予那个变量的初始值是&lt;code&gt;_&lt;/code&gt;，表示一个默认值。这个默认值对于数值类型为0，对于&lt;code&gt;Boolean&lt;/code&gt;类型为&lt;code&gt;false&lt;/code&gt;，对于&lt;code&gt;Unit&lt;/code&gt;为&lt;code&gt;()&lt;/code&gt;,而对于所有对象类型表示&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为了使用这个&lt;code&gt;Reference&lt;/code&gt;类，需要指定这个类型参数&lt;code&gt;T&lt;/code&gt;使用哪个类型，也就是单元中容纳元素的类型。例如，为了创建和使用一个容纳整数的单元，我们可以像下面这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object IntegerReference {
  def main(args: Array[String]) {
    val cell = new Reference[Int]
    cell.set(13)
    println(&quot;Reference contains the half of &quot; + (cell.get * 2))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正如这个例子中所看到的，&lt;code&gt;get&lt;/code&gt;方法返回的值在用作整数前，不需要转换。同样在这个特别单元中也不可能存储除了整数外的任何东西，因为它已经被声明容纳一个整数。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文档提供了对Scala语言的一个快速的概述，并介绍了一些基本示例。感兴趣的读者可以继续，对于实例，请阅读文档 &lt;em&gt;Scala实例（Scala By Example）&lt;/em&gt;，包含更多更高级的例子，如有需要，可参考 &lt;em&gt;Scala语言规范（Scala Language Specification）&lt;/em&gt; 。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pig Function Tutorial</title>
   <link href="http://haoch.me/articles/pig-function-tutorial.html"/>
   <updated>2014-01-11T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/pig-function-tutorial</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Slide: &lt;a href=&quot;/talks/pig_function&quot;&gt;pig_function&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;title: Pig Function
subtitle: A  tutorial for Pig built-in function and user defined functions&lt;/p&gt;

&lt;h1 id=&quot;pig-functions&quot;&gt;Pig Functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamic Invokers&lt;/li&gt;
  &lt;li&gt;Built in functions&lt;/li&gt;
  &lt;li&gt;User defined functions (UDFs)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dynamic-invokers&quot;&gt;Dynamic Invokers&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;DEFINE UrlDecode InvokeForString(&#39;java.net.URLDecoder.decode&#39;, &#39;String String&#39;); 
encoded_strings = LOAD &#39;encoded_strings.txt&#39; as (encoded:chararray); 
decoded_strings = FOREACH encoded_strings GENERATE UrlDecode(encoded, &#39;UTF-8&#39;); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java standard functions and not UDFs yet&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;static function&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;primitives only&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;(void&lt;/td&gt;
          &lt;td&gt;string&lt;/td&gt;
          &lt;td&gt;int&lt;/td&gt;
          &lt;td&gt;long&lt;/td&gt;
          &lt;td&gt;double&lt;/td&gt;
          &lt;td&gt;float&lt;/td&gt;
          &lt;td&gt;array) =&amp;gt; string&lt;/td&gt;
          &lt;td&gt;int&lt;/td&gt;
          &lt;td&gt;long&lt;/td&gt;
          &lt;td&gt;double&lt;/td&gt;
          &lt;td&gt;float&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dynamic-invokers---contine&quot;&gt;Dynamic Invokers - contine&lt;/h1&gt;
&lt;blockquote&gt;

  &lt;pre&gt;&lt;code&gt;DEFINE ALIAS InvokerFor___(&#39;CLASS_PATH&#39;,&#39;PARAM_RET_TYPES&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;DEFINE&lt;/li&gt;
  &lt;li&gt;Invoker&lt;/li&gt;
  &lt;li&gt;Invoker (depending in return type)
    &lt;ul&gt;
      &lt;li&gt;InvokeForString&lt;/li&gt;
      &lt;li&gt;InvokeForInt&lt;/li&gt;
      &lt;li&gt;InvokeForLong&lt;/li&gt;
      &lt;li&gt;InvokeForDouble&lt;/li&gt;
      &lt;li&gt;InvokeForFloat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Class Name&lt;/li&gt;
  &lt;li&gt;Argument Types:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;space-delimited&lt;/em&gt; ordered list of the classes&lt;/li&gt;
      &lt;li&gt;string, long, float, double, and int&lt;/li&gt;
      &lt;li&gt;not case sensitive&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;built-in-functions&quot;&gt;Built in functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Eval Functions&lt;/li&gt;
  &lt;li&gt;Load/Store Functions&lt;/li&gt;
  &lt;li&gt;Math Functions&lt;/li&gt;
  &lt;li&gt;String Functions&lt;/li&gt;
  &lt;li&gt;Bag and Tuple Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;eval-functions&quot;&gt;Eval Functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;AVG&lt;/li&gt;
  &lt;li&gt;CONCAT&lt;/li&gt;
  &lt;li&gt;COUNT&lt;/li&gt;
  &lt;li&gt;COUNT_STAR: Computes the number of elements in a bag&lt;/li&gt;
  &lt;li&gt;DIFF&lt;/li&gt;
  &lt;li&gt;IsEmpty&lt;/li&gt;
  &lt;li&gt;MAX&lt;/li&gt;
  &lt;li&gt;MIN&lt;/li&gt;
  &lt;li&gt;SIZE&lt;/li&gt;
  &lt;li&gt;SUM&lt;/li&gt;
  &lt;li&gt;TOKENIZE&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;loadstore-functions&quot;&gt;Load/Store Functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Handling Compression
    &lt;ul&gt;
      &lt;li&gt;gzip: .gz (not splitable)&lt;/li&gt;
      &lt;li&gt;bzip: .bz or bz2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BinStorage
  － NOT compression
  － multiple location inputs&lt;/li&gt;
  &lt;li&gt;PigDump
  － store data of tuples in human-readable UTF-8 format&lt;/li&gt;
  &lt;li&gt;PigStorage: Load/Stores as structured text files&lt;/li&gt;
  &lt;li&gt;TextLoader: Loads unstructured data in UTF-8 format&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;math-functions&quot;&gt;Math Functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;ABS&lt;/li&gt;
  &lt;li&gt;ACOS&lt;/li&gt;
  &lt;li&gt;ASIN&lt;/li&gt;
  &lt;li&gt;ATAN&lt;/li&gt;
  &lt;li&gt;CBRT&lt;/li&gt;
  &lt;li&gt;CEIL&lt;/li&gt;
  &lt;li&gt;COS&lt;/li&gt;
  &lt;li&gt;COSH&lt;/li&gt;
  &lt;li&gt;EXP&lt;/li&gt;
  &lt;li&gt;FLOOR&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;string-functions&quot;&gt;String Functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;INDEXOF(string, ‘character’, startIndex)&lt;/li&gt;
  &lt;li&gt;LAST_INDEX_OF(string, ‘character’, startIndex)&lt;/li&gt;
  &lt;li&gt;LCFIRST&lt;/li&gt;
  &lt;li&gt;LOWER&lt;/li&gt;
  &lt;li&gt;REGEX_EXTRACT(string, regex, index)&lt;/li&gt;
  &lt;li&gt;REGEX_EXTRACT(string, regex)&lt;/li&gt;
  &lt;li&gt;REPLACE(string, ‘oldChar’, ‘newChar’);&lt;/li&gt;
  &lt;li&gt;STRSPLIT(string, regex, limit)&lt;/li&gt;
  &lt;li&gt;SUBSTRING(string, startIndex, stopIndex)&lt;/li&gt;
  &lt;li&gt;TRIM&lt;/li&gt;
  &lt;li&gt;UCFIRST&lt;/li&gt;
  &lt;li&gt;UPPER&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;bag-and-tuple-functions&quot;&gt;Bag and Tuple Functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;TOBAG(expression [, expression …])&lt;/li&gt;
  &lt;li&gt;TOP(topN,column,relation)&lt;/li&gt;
  &lt;li&gt;TOTUPLE(expression [, expression …])&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;user-defined-functions&quot;&gt;User Defined Functions&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;-- myscript.pig
REGISTER myudfs.jar;
A = LOAD &#39;student_data&#39; AS (name: chararray, age: int, gpa: float);
B = FOREACH A GENERATE myudfs.UPPER(name);
DUMP B;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Java/Python/Javascript&lt;/li&gt;
  &lt;li&gt;Piggy Bank&lt;/li&gt;
  &lt;li&gt;Write UDF in Java: org.apache.pig.{EvalFunc,FilterFunc,StorageFunc,…}&lt;/li&gt;
  &lt;li&gt;Load UDF in Pig&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;eval-udfs&quot;&gt;Eval UDFS&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;org.apache.pig.EvalFunc
    &lt;ul&gt;
      &lt;li&gt;Object exec(Tuple objects)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Algebraic Interface&lt;/li&gt;
  &lt;li&gt;Accumulator Interface&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;algebraic-interface&quot;&gt;Algebraic Interface&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;public interface Algebraic{
    public String getInitial();
    public String getIntermed();
    public String getFinal();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gist: &lt;a href=&quot;https://gist.github.com/haoch/8346176#file-pig-udf-count-java&quot;&gt;https://gist.github.com/haoch/8346176#file-pig-udf-count-java&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;accumulator-interface&quot;&gt;Accumulator Interface&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;public interface Accumulator &amp;lt;T&amp;gt; {
   /**
    * Process tuples. Each DataBag may contain 0 to many tuples for current key
    */
    public void accumulate(Tuple b) throws IOException;
    /**
    * Called when all tuples from current key have been passed to the accumulator.
    * @return the value for the UDF for this key.
    */
    public T getValue();
    /**
    * Called after getValue() to prepare processing for next key. 
    */
    public void cleanup();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gist: &lt;a href=&quot;https://gist.github.com/haoch/8346176#file-pig-udf-intmax-java&quot;&gt;https://gist.github.com/haoch/8346176#file-pig-udf-intmax-java&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;filter-function&quot;&gt;Filter Function&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;org.apache.pig.FilterFunc
    &lt;ul&gt;
      &lt;li&gt;Boolean exec(Tuple input)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gist:&lt;a href=&quot;https://gist.github.com/haoch/8346176#file-pig-udf-isempty-java&quot;&gt;https://gist.github.com/haoch/8346176#file-pig-udf-isempty-java&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;loadstorage-udf&quot;&gt;Load/Storage UDF&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;-- full outer join
A = LOAD &#39;student_data&#39; AS (name: chararray, age: int, gpa: float);
B = LOAD &#39;voter_data&#39; AS (name: chararray, age: int, registration: chararay, contributions: float);
C = COGROUP A BY name, B BY name;
D = FOREACH C GENERATE group, flatten((IsEmpty(A) ? null : A)), flatten((IsEmpty(B) ? null : B));
dump D;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;org.apache.pig.StoreFunc
    &lt;ul&gt;
      &lt;li&gt;public void putNext(Tuple f) throws IOException&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;org.apache.pig.LoadFunc
    &lt;ul&gt;
      &lt;li&gt;public Tuple getNext() throws IOException&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;load-udf&quot;&gt;Load UDF&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;REGISTER myudfs.jar;
A = LOAD &#39;student_data&#39; AS (name: chararray, age: int, gpa: float);
B = FOREACH A GENERATE myudfs.UPPER(name);
DUMP B;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;REGISTER &lt;jar&gt;&lt;/jar&gt;&lt;/li&gt;
  &lt;li&gt;packege.ClassName(arguments)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pig.apache.org/docs/r0.9.1/func.html&quot;&gt;Pig Function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pig.apache.org/docs/r0.9.1/udf.html&quot;&gt;Pig UDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.fr/Programming-Pig-Alan-Gates/dp/1449302645/ref=sr_1_1?ie=UTF8&amp;amp;qid=1389288284&amp;amp;sr=8-1&amp;amp;keywords=pig+programming&quot;&gt;Programming-Pig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-end&quot;&gt;The End&lt;/h1&gt;
&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Hao
&lt;a href=&quot;http://haoch.me&quot;&gt;haoch.me&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Github 项目管理与开发流程实践</title>
   <link href="http://haoch.me/articles/github-project-management.html"/>
   <updated>2014-01-11T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/github-project-management</id>
   <content type="html">&lt;p&gt;总所周知，&lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt;是目前为止体验最好的Git版本控制服务，但是同时提供了非常清晰高效的项目跟踪和管理功能，全球知名的互联网公司如ebay等均购买其企业版本作为内部代码管理之用，对于普通个人开发者和开源项目，Github提供的开放免费或付费服务，也会为开发工作以及项目追踪和管理带来诸多便利。本文将概要记录本人利用github来跟踪和管理个人项目的实践与经验，作为自我总结，也便于日后改进完善。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;创建项目&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;项目名&lt;/em&gt;:项目名统一均以字符加“-”组成，英文字母小写&lt;/p&gt;

&lt;p&gt;&lt;em&gt;项目描述&lt;/em&gt;:尽可能加入项目初略描述&lt;/p&gt;

&lt;p&gt;&lt;em&gt;项目链接&lt;/em&gt;: 此处链接一般为wiki链接，或者个人网站中的项目发布页(针对公开发行项目)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;README&lt;/em&gt;: 作为项目的主要说明文档入口，一般会包含以下内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目全名&lt;/li&gt;
  &lt;li&gt;项目描述&lt;/li&gt;
  &lt;li&gt;当前版本以及链接(即tag链接)&lt;/li&gt;
  &lt;li&gt;项目截图（针对应用）&lt;/li&gt;
  &lt;li&gt;使用说明
    &lt;ul&gt;
      &lt;li&gt;对于library，会提供maven（java）或者npm（nodejs）等&lt;/li&gt;
      &lt;li&gt;对于应用，会提供安装使用的具体描述&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;详细文档链接（wiki或者个人站post）&lt;/li&gt;
  &lt;li&gt;支持和讨论链接（支持与讨论主要基于github的issue管理功能）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;branch&quot;&gt;项目分支（Branch）&lt;/h2&gt;
&lt;p&gt;本文并非git的实践模式说明，具体git操作将在其他文章再予以详细介绍。此处讨论的分支主要用于区分code，doc，snapshot和release，
此处存在一定争议，对于git的最佳实践而言，编译后的binary文件并不适合放在github中，文档以及编译后的文件应该单独发布，当然这需要一定的额外成本，因此，此处仅鼓励针对独立开发者或者小型项目而言。&lt;/p&gt;

&lt;p&gt;初始化情况下，会建立如下分支(branch)：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;:主要代码分支，该branch上每次commit的代码最好均有issue与之对应，commit的comment满足以下格式: &lt;code&gt;#{ISSUE_ID}: issue title&lt;/code&gt;, 并同时将commit id添加如对应的github issue描述中，使得github页面或者git log中均可对项目issue追踪有个清晰的掌控，每次项目版本完成时，针对版本号创建新的branch: &lt;code&gt;version-{VERSION_NUMBER}&lt;/code&gt;以得到该版本的代码的一份snapshot。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dev&lt;/strong&gt;: 临时工作分支，对于针对具体issue进行开发，完成局部功能点，但尚未全部完成时，代码提交于此，commit的comment尽量需满足#下格式：&lt;code&gt;#{ISSUE_ID}: work log&lt;/code&gt;，多人协作时，可通过分不同的brissue&lt;code&gt;#{ISSUE_ID}&lt;/code&gt;来管理多个working 分支。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;doc&lt;/strong&gt;:用于存放，截图，帮组文档以及release notes等非代码本身的文件，此部分功能可通过wiki完成，酌情选择&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;snapshot&lt;/strong&gt;:该branch一般会删除所有的source code，仅仅编译或打包后的文件，提供对于当前版本的下载。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;release&lt;/strong&gt;:该branch与snapshot分支一样不包含source code，仅存放编译打包后的文件，提供对于不同已正式发布版本的下载。对于更加精细的release，可结合利用branch:&lt;code&gt;release-{VERSION_NUMBER}&lt;/code&gt;与tag: &lt;code&gt;{VERSION_NUMBER}&lt;/code&gt;,将tag打在对应release的branch上即可。而每次release新的版本最好对应不同的milestone，通过对应的milestone，便可查询出对应版本所解决的issue，根据issue对应的commit号，便可得知落实在代码上的具体修改。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;版本定义&lt;/h2&gt;
&lt;p&gt;对于持续交付和迭代的项目而言，版本号往往代表着产品发布的一系列功能的总体代号和里程碑。因此，设计一套明确有效的版本定义规则具有重要意义。&lt;/p&gt;

&lt;p&gt;一般使用的版本发布规则非常简单: &lt;code&gt;N.N.N&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;版本号最后一位，指代小规模的改进，主要是局部功能上的完善和bug的修复，每次改进自增一位，一般针对某个milestone，也可能包括紧急升级等。&lt;/li&gt;
  &lt;li&gt;版本号第二位，指代较大规模的功能或模块的改进，主要是功能的改进和添加较为重要的新功能，对应着多个milestone：&lt;code&gt;VERSION-N.N.N&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;版本号的第三位，指代正式发布成熟产品时使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;项目管理与开发&lt;/h2&gt;
&lt;p&gt;项目开发主要利用_master与_dev_两个branch，结合milestone和issue。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;创建__ISSUE__: 首先，制定项目总体scope，设计总体构架，细分功能点，将功能点分散，创建ISSUE.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建__MILESTONE__:创建MILESTONE,版本号命名:&lt;code&gt;VERSION-N.N.N&lt;/code&gt;,对已有ISSUE进行优先级排序，将高优先级需求加入MILESTONE中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;开发: 
    &lt;ul&gt;
      &lt;li&gt;由高到低，选择ISSUE，理解ISSUE需求，&lt;/li&gt;
      &lt;li&gt;git clone/pull 最新代码&lt;/li&gt;
      &lt;li&gt;checkout至&lt;code&gt;dev&lt;/code&gt; 分支(针对个人)或者创建新的branch:&lt;code&gt;#{ISSUE_ID}&lt;/code&gt;进行设计，编码与测试&lt;/li&gt;
      &lt;li&gt;每次commit均需加入满足规范的comment:&lt;code&gt;#{ISSUE_ID}: working log&lt;/code&gt;，&lt;/li&gt;
      &lt;li&gt;等整个ISSUE完成之后，进行code review，&lt;/li&gt;
      &lt;li&gt;然后merge至&lt;code&gt;master&lt;/code&gt;分支，并添加comments：&lt;code&gt;#{ISSUE_ID}: issue title&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关闭ISSUE: ISSUE完成后，完成后关闭ISSUE，此时因为comments中使用了&lt;code&gt;#{ISSUE_ID}&lt;/code&gt;，所有与该ISSUE关联的commit以及comments内容均会显示于issue详细页面。 &lt;/li&gt;
  &lt;li&gt;关闭MILESTONE：当MILESTONE中的ISSUE均fix后，关闭MILESTONE&lt;/li&gt;
  &lt;li&gt;版本发布: 根据milestone的版本号，进行项目版本发布:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;创建版本相关的branch:&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  git branch release-{VERION_NUMBER}`
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;切换至对应版本branch: &lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  git checkout release-{VERSION_NUMBER}`
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;提交对应branch:&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  git push origin release-{VERSION_NUMBER}`
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;创建版本相关tag:&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  git tag {VERSION_NUMBER} -m {ISSUES_TITLE_LIST}`
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;提交tag&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;  git push origin {VERSION_NUMBER}
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;值得注意的是&lt;/strong&gt;: &lt;/p&gt;

&lt;p&gt;统一使用__&lt;code&gt;#{ISSUE_ID}&lt;/code&gt;__来描述issue编号，主要有以下几处好处:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先，统一ISSUE对应commit的comment规范，是得整个commentlog简单直观，很容易与对应的ISSUE关联&lt;/li&gt;
  &lt;li&gt;此外，github页面中，会自动为&lt;code&gt;#{NUMBER}&lt;/code&gt;的文本添加对应编号的ISSUE页面的链接&lt;/li&gt;
  &lt;li&gt;而且，但凡以包含&lt;code&gt;#{NUMBER}&lt;/code&gt;并且可关联至ISSUE NUMBER的comments，均会自动回复至github的issue页面中，如 &lt;a href=&quot;https://github.com/haoch/haoch.github.io/issues/2&quot;&gt;https://github.com/haoch/haoch.github.io/issues/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git bash:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshot/git-log.png&quot; alt=&quot;git-log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Github commit page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/haoch/haoch.github.io/commits/master&quot;&gt;&lt;img src=&quot;/images/screenshot/github-commit.png&quot; alt=&quot;github-commit&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github issue page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/haoch/haoch.github.io/issues/2&quot;&gt;&lt;img src=&quot;/images/screenshot/github-issue.png&quot; alt=&quot;github-issue&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;项目发布&lt;/h2&gt;
&lt;p&gt;由于git原则上是不希望将编译后的binary文件添加到repository中，但是对于个人开发者和小型项目的轻量级需求而言，还是可取的，具体步骤如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;创建release branch:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  git branch release
  git checkout release
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;清空除了.git文件夹内以外的所有文件&lt;/li&gt;
  &lt;li&gt;将编译后的打包文件拷贝其中，注意定义清晰的版本与目录或者文件的对应规则&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加到repository中&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  git add {PACKAGE_FILE}
  git commit -am &#39;RELEASE-{VERSION_NUMBER}&#39;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;提交后，便可将github的raw服务作为cdn使用，又不与source code混杂一团&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;值得注意的是&lt;/strong&gt;:以上方法，对于不同的发布内容，同样可以将github的raw服务作为特定服务使用，比如针对java而言可将其作为maven服务器使用，分发说明上便只需提供maven的repository url，groupid，artifactid以及version即可，而隐藏具体的文件下载细节，具体请阅读：&lt;a href=&quot;http://haoch.me/articles/build-maven-repo-on-github.html&quot;&gt;基于GITHUB搭建MAVEN仓库&lt;/a&gt;一文，当然不只是maven，对于nodejs，ruby等均可基于此定制自己的分发服务。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>互联网金融</title>
   <link href="http://haoch.me/articles/internet-finance.html"/>
   <updated>2014-01-03T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/internet-finance</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;余额宝&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;基金代码: 000198&lt;/li&gt;
  &lt;li&gt;基金简称: 天虹增利宝&lt;/li&gt;
  &lt;li&gt;最新净值趋势: &lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;alipay_trend_container&quot; style=&quot;width:100%; height:400px;&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;百度百发&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;基金代码: 000486&lt;/li&gt;
  &lt;li&gt;基金简称：嘉实1个月理财债券E&lt;/li&gt;
  &lt;li&gt;累计净值趋势: (定期基金无最新净值)&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;baidu_trend_container&quot; style=&quot;width:100%; height:400px;&quot;&gt;&lt;/div&gt;

&lt;script src=&quot;http://code.highcharts.com/stock/highstock.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;http://code.highcharts.com/stock/modules/exporting.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--//
$(function() {
	var fundTrendChart = function(container,funds,col){
		var seriesOptions = [],
			 yAxisOptions = [],
			 seriesCounter = 0
			// names = [&#39;MSFT&#39;, &#39;AAPL&#39;, &#39;GOOG&#39;],
			// funds = [
			// 		{code:&#39;000198&#39;,name:&quot;余额宝&quot;,fund_name:&quot;天虹增利宝&quot;},
			// 		//{code: &#39;000486&#39;,name:&quot;百度百发&quot;,fund_name:&quot;嘉实1个月理财债券E&quot;}
			// 	]
			
			colors = Highcharts.getOptions().colors;
			$.each(funds, function(i, fund) {
				$.getJSON(&#39;http://wbshub.herokuapp.com/proxy?callback=?&amp;url=http%3A%2F%2Fwiapi.hexun.com%2Ffund%2Ffundtrend.php%3Fcode%3D&#39;+fund.code+&#39;%26c%3D100000&#39;,	function(data) {
		             seriesOptions[i] = {
						name: fund.name+&quot;(&quot;+fund.fund_name+&quot;:&quot;+fund.code+&quot;)&quot;,
						data: []
					};
					// reorder
		         var len = data.doc.data.length;
		         for(var _i=len-1;_i&gt;=0;_i--){
		             seriesOptions[i].data[len-1-_i]=[new Date(data.doc.data[_i].enddate).getTime(),parseFloat(data.doc.data[_i][col])];
		         }    
					seriesCounter++;
					if (seriesCounter == funds.length) {
						createChart(container);
					}
				});
			});

		// create the chart when all data is loaded
		function createChart(container) {
	        console.log(seriesOptions);
			$(container).highcharts(&#39;StockChart&#39;, {
			    chart: {
			    },
			    rangeSelector: {
			        selected: 4
			    },
			    yAxis: {
			    	labels: {
			    		formatter: function() {
			    			return &quot;&lt;br/&gt;&quot;+this.value;	
	               }
			    	},
			    	plotLines: [{
			    		value: 0,
			    		width: 2,
			    		color: &#39;silver&#39;
			    	}]
			    },
			    plotOptions: {
			    	series: {
			    		// compare: &#39;percent&#39;
			    	}
			    },
			    tooltip: {
			    	pointFormat: &#39;&lt;span style=&quot;color:{series.color}&quot;&gt;{series.name}&lt;/span&gt;: &lt;b&gt;{point.y}&lt;/b&gt; &lt;br/&gt;&#39;,
			    	valueDecimals: 4
			    },
			    series: seriesOptions
			});
		}
	}
	fundTrendChart(&quot;#alipay_trend_container&quot;,[{code:&#39;000198&#39;,name:&quot;余额宝&quot;,fund_name:&quot;天虹增利宝&quot;}],&quot;netvalue&quot;);
	fundTrendChart(&quot;#baidu_trend_container&quot;,[{code: &#39;000486&#39;,name:&quot;百度百发&quot;,fund_name:&quot;嘉实1个月理财债券E&quot;}],&#39;unitnetvalue&#39;);
});
--&gt;
&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Dive into Fair Scheduler</title>
   <link href="http://haoch.me/articles/dive-into-fair-scheduler.html"/>
   <updated>2013-12-20T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/dive-into-fair-scheduler</id>
   <content type="html">&lt;h1 id=&quot;about-fair-scheduler&quot;&gt;About Fair Scheduler&lt;/h1&gt;
&lt;p&gt;Fair scheduling is a method of assigning resources to jobs such that all jobs get, on average, an equal share of resources over time. When there is a single job running, that job uses the entire cluster. When other jobs are submitted, tasks slots that free up are assigned to the new jobs, so that each job gets roughly the same amount of CPU time. Unlike the default Hadoop scheduler, which forms a queue of jobs, this lets short jobs finish in reasonable time while not starving long jobs. It is also an easy way to share a cluster between multiple of users. Fair sharing can also work with job priorities - the priorities are used as weights to determine the fraction of total compute time that each job gets.&lt;/p&gt;

&lt;p&gt;The fair scheduler organizes jobs into pools, and divides resources fairly between these pools. By default, there is a separate pool for each user, so that each user gets an equal share of the cluster. It is also possible to set a job’s pool based on the user’s Unix group or any jobconf property. Within each pool, jobs can be scheduled using either fair sharing or first-in-first-out (FIFO) scheduling.&lt;/p&gt;

&lt;p&gt;In addition to providing fair sharing, the Fair Scheduler allows assigning guaranteed minimum shares to pools, which is useful for ensuring that certain users, groups or production applications always get sufficient resources. When a pool contains jobs, it gets at least its minimum share, but when the pool does not need its full guaranteed share, the excess is split between other pools.&lt;/p&gt;

&lt;p&gt;If a pool’s minimum share is not met for some period of time, the scheduler optionally supports preemption of jobs in other pools. The pool will be allowed to kill tasks from other pools to make room to run. Preemption can be used to guarantee that “production” jobs are not starved while also allowing the Hadoop cluster to also be used for experimental and research jobs. In addition, a pool can also be allowed to preempt tasks if it is below half of its fair share for a configurable timeout (generally set larger than the minimum share preemption timeout). When choosing tasks to kill, the fair scheduler picks the most-recently-launched tasks from over-allocated jobs, to minimize wasted computation. Preemption does not cause the preempted jobs to fail, because Hadoop jobs tolerate losing tasks; it only makes them take longer to finish.&lt;/p&gt;

&lt;p&gt;The Fair Scheduler can limit the number of concurrent running jobs per user and per pool. This can be useful when a user must submit hundreds of jobs at once, or for ensuring that intermediate data does not fill up disk space on a cluster when too many concurrent jobs are running. Setting job limits causes jobs submitted beyond the limit to wait until some of the user/pool’s earlier jobs finish. Jobs to run from each user/pool are chosen in order of priority and then submit time.&lt;/p&gt;

&lt;p&gt;Finally, the Fair Scheduler can limit the number of concurrent running tasks per pool. This can be useful when jobs have a dependency on an external service like a database or web service that could be overloaded if too many map or reduce tasks are run at once.&lt;/p&gt;

&lt;h1 id=&quot;fifoscheduler-policy&quot;&gt;FIFOScheduler Policy&lt;/h1&gt;

&lt;p&gt;Core code:
&lt;a href=&quot;https://github.com/apache/hadoop-common/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FifoPolicy.java&quot;&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.policies.FIFOPolicy.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Compare Schedulables in order of priority and then submission time, as in&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * the default FIFO scheduler in Hadoop.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FifoComparator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5905036205491177060L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPriority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPriority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// In the rare case where jobs were submitted at the exact same time,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// compare them by name (which will be the JobID) to get a deterministic&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ordering, so we don&amp;#39;t alternately launch tasks from different jobs.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedulables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earliest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedulable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedulables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earliest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;schedulable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earliest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;earliest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedulable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;earliest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFairShare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;fairscheduler-policy&quot;&gt;FairScheduler Policy&lt;/h1&gt;

&lt;p&gt;FairScheduler policy core code：
&lt;a href=&quot;https://github.com/apache/hadoop-common/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java#L65&quot;&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.policies.FairSharePolicy.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Compare Schedulables via weighted fair sharing. In addition, Schedulables&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * below their min share get priority over those whose min share is met.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Schedulables below their min share are compared by how far below it they&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * are as a ratio. For example, if job A has 8 out of a min share of 10 tasks&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * and job B has 50 out of a min share of 100, then job B is scheduled next,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * because B is at 50% of its min share and A is at 80% of its min share.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Schedulables above their min share are compared by (runningTasks / weight).&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * If all weights are equal, slots are given to the job with the fewest tasks;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * otherwise, jobs with more weight get proportionally more slots.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FairShareComparator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5564969375856699313L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShareRatio1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShareRatio2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useToWeightRatio1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useToWeightRatio2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShare1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOURCE_CALCULATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMinShare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDemand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShare2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOURCE_CALCULATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMinShare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDemand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOURCE_CALCULATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShare1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOURCE_CALCULATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShare2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;minShareRatio1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOURCE_CALCULATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShare1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;minShareRatio2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESOURCE_CALCULATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShare2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;useToWeightRatio1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;useToWeightRatio2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minShareRatio1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minShareRatio2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;// Neither schedulable is needy&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;useToWeightRatio1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useToWeightRatio2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;// Apps are tied in fairness ratio. Break the tie by submit time and job&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;// name to get a deterministic ordering, which is useful for unit tests.&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedulables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ComputeFairShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;dominantresourcefairness-policy&quot;&gt;DominantResourceFairness Policy&lt;/h1&gt;

&lt;p&gt;DominantResourceFairness policy core code: 
&lt;a href=&quot;https://github.com/apache/hadoop-common/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java#L87&quot;&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.policies.DominantResourceFairnessPolicy.java&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DominantResourceFairnessComparator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NUM_RESOURCES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clusterCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setClusterCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clusterCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clusterCapacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clusterCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfCluster1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfCluster2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfMinShare1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfMinShare2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NUM_RESOURCES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NUM_RESOURCES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
     
      &lt;span class=&quot;c1&quot;&gt;// Calculate shares of the cluster for each resource both schedulables.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;calculateShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;clusterCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfCluster1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;calculateShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMinShare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfMinShare1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEUTRAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;calculateShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;clusterCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfCluster2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;calculateShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceUsage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMinShare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfMinShare2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEUTRAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     
      &lt;span class=&quot;c1&quot;&gt;// A queue is needy for its min share if its dominant resource&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// (with respect to the cluster capacity) is below its configured min share&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// for that resource&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfMinShare1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfMinShare2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceOrder2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compareShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharesOfCluster1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfCluster2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2Needy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1Needy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// both are needy below min share&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compareShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharesOfMinShare1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharesOfMinShare2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Apps are tied in fairness ratio. Break the tie by submit time.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStartTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * Calculates and orders a resource&amp;#39;s share of a pool in terms of two vectors.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * The shares vector contains, for each resource, the fraction of the pool that&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * it takes up.  The resourceOrder vector contains an ordering of resources&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * by largest share.  So if resource=&amp;lt;10 MB, 5 CPU&amp;gt;, and pool=&amp;lt;100 MB, 10 CPU&amp;gt;,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * shares will be [.1, .5] and resourceOrder will be [CPU, MEMORY].&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculateShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;shares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;shares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVirtualCores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVirtualCores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// sort order vector by resource share&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;resourceOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;resourceOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;resourceOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;resourceOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEMORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareShares&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shares1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceWeights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shares2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shares1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceOrder1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shares2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceOrder2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;h2 id=&quot;uncompleted&quot;&gt;UNCOMPLETED&lt;/h2&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Genie - Hadoop Platform as a Service</title>
   <link href="http://haoch.me/articles/netflix-genie.html"/>
   <updated>2013-12-16T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/netflix-genie</id>
   <content type="html">&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/23440207&quot; width=&quot;100%&quot; height=&quot;456&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/krishflix/genie-hadoop-platform-as-a-service-at-netflix&quot; title=&quot;Genie - Hadoop Platform as a Service at Netflix&quot; target=&quot;_blank&quot;&gt;Genie - Hadoop Platform as a Service at Netflix&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/krishflix&quot; target=&quot;_blank&quot;&gt;Sriram Krishnan&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Ruby With RVM</title>
   <link href="http://haoch.me/articles/ruby-with-rvm.html"/>
   <updated>2013-12-13T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/ruby-with-rvm</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;RVM&lt;/strong&gt; is Ruby Version Manager allowing you to easily manage ruby environment of different versions and gemsets. It encourages to install ruby environments into user home directory &lt;code&gt;~/.rvm&lt;/code&gt; instead of global system accroding to specified requirements and provides convenient methods for switching and management.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rvm.io/images/logo.png&quot; alt=&quot;https://rvm.io/images/logo.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;install-rvm&quot;&gt;Install RVM&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;dev&lt;/strong&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -sSL https://get.rvm.io | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;withour autolibs&lt;/strong&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -sSL https://get.rvm.io | bash -s -- --autolibs=read-fail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;stable&lt;/strong&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -sSL https://get.rvm.io | bash -s stable --ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More detail, please refer to &lt;a href=&quot;https://rvm.io/rvm/install&quot;&gt;https://rvm.io/rvm/install&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;update-rvm&quot;&gt;Update RVM&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;rvm get stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case of problems try first with development version
(maybe it’s already fixed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm get head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very old installations might not support those update methods, just run the installer and reopen your terminal.&lt;/p&gt;

&lt;h1 id=&quot;installing-ruby&quot;&gt;Installing Ruby&lt;/h1&gt;

&lt;p&gt;Follow instructions from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm requirements
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List known rubies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm list known
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install 1.9.3                # Latest known patch level
rvm install 1.9.3 -j 3           # Parallel compile, set to # of CPU cores
rvm install 1.9.3 --patch falcon # Use a patch (falcon for performance)
rvm install 1.9.2-p318           # Patchlevel 318
rvm install rbx --1.9            # Rubinius with 1.9 mode set as default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all rubies and gemsets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm list         # List rubies only
rvm list gemsets # List rubies and gemsets
rvm gemset list  # List gemsets for current ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Selecting Ruby for work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm system                 # For system ruby, with fallback to default 
rvm use jruby              # For current session only
rvm use --default 1.9.3    # For current and new sessions
rvm use --ruby-version rbx # For current session and this project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RVM will automatically use a ruby and gemset when you &lt;code&gt;cd&lt;/code&gt; to a project directory.&lt;/p&gt;

&lt;p&gt;Read more on project files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rvm.io/workflow/projects/#ruby-versions&quot;&gt;https://rvm.io/workflow/projects/#ruby-versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;using-ruby-and-gems&quot;&gt;Using ruby and gems&lt;/h1&gt;

&lt;p&gt;After selecting Ruby work as usual&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -v
gem install haml
haml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Temporarily selecting another Ruby or gemset&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm 1.8.7 do gem install rspec      # in the given ruby
rvm 1.8.7,1.9.2 do gem install haml # in this two rubies
rvm @global do gem install gist     # in @global gemset of current ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;gemsets&quot;&gt;Gemsets&lt;/h2&gt;

&lt;p&gt;RVM by default allows creating multiple environments for one ruby - called &lt;em&gt;gemsets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Gemsets can be specified together with ruby name using gemsets separator(@):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ruby-1.9.3-p125@my-project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During installation of Ruby, RVM creates two gemsets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;default - automatically selected when no @gemset specified: rvm use 1.9.3&lt;/li&gt;
  &lt;li&gt;global  - super gemset, inherited by all other gemsets for the given ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Working with gemsets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm use 1.8.7                          # use the ruby to manage gemsets for
rvm gemset create project_name         # create a gemset
rvm gemset use project_name            # use a gemset in this ruby
rvm gemset list                        # list gemsets in this ruby
rvm gemset delete project_name         # delete a gemset
rvm 1.9.1@other_project_name           # use another ruby and gemset
rvm 1.9.3@_project --create --rvmrc    # use and create gemset &amp;amp; .rvmrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;install-rvm-for-all-users&quot;&gt;Install RVM for all users&lt;/h2&gt;
&lt;p&gt;Discouraged; make sure to read &lt;a href=&quot;http://rvm.io/rvm/installation/&quot;&gt;http://rvm.io/rvm/installation/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;trouble-shooting&quot;&gt;Trouble shooting&lt;/h1&gt;
&lt;p&gt;A lot of resources is available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in your terminal: &lt;code&gt;rvm help&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rvm.io/&quot;&gt;https://rvm.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q1. getcwd: cannot access parent directories: No such file or directory&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $sudo brew doctor
 sudo: cannot get working directory
 shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Reason&lt;/strong&gt;: The working directory you are currently in is deleted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q2. rvm reinstall 1.9.3 need sudo&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Checking requirements for osx.
  Certificates in &#39;/usr/local/etc/openssl/cert.pem&#39; already are up to date.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Reason&lt;/strong&gt;: Need root permission to update ‘/usr/local/etc/openssl/cert.pem’ &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q3. ruby extconf.rb error on mac osx&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: reinstall corresponding OSX Command Line Tools for Xcode &lt;a href=&quot;https://developer.apple.com/downloads/index.action&quot;&gt;https://developer.apple.com/downloads/index.action&lt;/a&gt; and reinstall your package again, if not work, reinstall rvm and ruby then retry&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Practical Pig Tutorial</title>
   <link href="http://haoch.me/articles/practical-pig.html"/>
   <updated>2013-12-13T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/practical-pig</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TALK&lt;/strong&gt;: &lt;a href=&quot;http://haoch.me/talks/practical_pig&quot;&gt;http://haoch.me/talks/practical_pig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://hadoop.apache.org/images/hadoop-logo.jpg&quot; alt=&quot;Hadoop&quot; /&gt;
&lt;img width=&quot;60&quot; height=&quot;90&quot; alt=&quot;Pig&quot; src=&quot;http://hortonworks.com/wp-content/uploads/2013/10/pig.gif&quot; /&gt; &lt;/p&gt;

&lt;h1 id=&quot;practical-pig&quot;&gt;Practical Pig&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Agenda&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why pig&lt;/li&gt;
  &lt;li&gt;Components&lt;/li&gt;
  &lt;li&gt;How it works with Map Reduce&lt;/li&gt;
  &lt;li&gt;Pig Latin&lt;/li&gt;
  &lt;li&gt;Advanced References and topics&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why-pig&quot;&gt;Why Pig&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Map Reduce is very powerful, but:
    &lt;ul&gt;
      &lt;li&gt;requires a Java programmer&lt;/li&gt;
      &lt;li&gt;re-invent common functionality (join, filter,etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pig provides a higher level language&lt;/li&gt;
  &lt;li&gt;Increases productivity
    &lt;ul&gt;
      &lt;li&gt;10 lines of Pig Latin = 200 lines of Java&lt;/li&gt;
      &lt;li&gt;4 hours of writing in java took 15 mins in Pig Latin&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Face to no only java programmers&lt;/li&gt;
  &lt;li&gt;Provides common operations like join, group,filter,sort&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why-new-languages&quot;&gt;Why new languages&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Pig Latin is procedural, where SQL is declarative&lt;/li&gt;
  &lt;li&gt;Pig Latin allows pipeline developers to decide where to checkpoint data in the pipeline&lt;/li&gt;
  &lt;li&gt;Pig Latin allows the developer to select specific operator implementations directly rather than relying on the optimizer&lt;/li&gt;
  &lt;li&gt;Pig Latin supports splits in the pipeline&lt;/li&gt;
  &lt;li&gt;Pig Latin allows developers to insert their own code and existing binaries almost anywhere in the data pipeline&lt;/li&gt;
  &lt;li&gt;Metadata not requireds, but used when available&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-pig-work&quot;&gt;How Pig Work&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pig Engine&lt;/strong&gt;: provides an execution engine atop Hadoop
    &lt;ul&gt;
      &lt;li&gt;Removes need for users to tune Hadoop for their needs&lt;/li&gt;
      &lt;li&gt;Insulates users from changes in Hadoop interfaces&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$PIG_HOME/lib/pig.jar&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;parses&lt;/li&gt;
      &lt;li&gt;checks&lt;/li&gt;
      &lt;li&gt;optimizes&lt;/li&gt;
      &lt;li&gt;plans execution&lt;/li&gt;
      &lt;li&gt;submits jar to Hadoop&lt;/li&gt;
      &lt;li&gt;monitors job progress &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-pig-is-being-used&quot;&gt;How Pig is being Used&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Web log processing&lt;/li&gt;
  &lt;li&gt;Data processing for web search platforms&lt;/li&gt;
  &lt;li&gt;Ad hoc queries across large data sets&lt;/li&gt;
  &lt;li&gt;Rapid prototyping of algorithms for processing large data sets&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Pig Mix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PigMix is a set of queries used test pig performance from release to release: &lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/PigMix&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/PigMix
&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;data-types&quot;&gt;Data Types&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Scalar types:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;long&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;double&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;chararray&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;bytearray&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Complex types:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: associative array&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;tuple&lt;/strong&gt;: ordered list of data, elements may be of any scalar or complex type&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;bag&lt;/strong&gt;: unordered collection of tuples&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pig&lt;/strong&gt;: &lt;code&gt;$pig&lt;/code&gt; / &lt;code&gt;$pig -x local&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt;: gun readline interactive tool&lt;/li&gt;
  &lt;li&gt;Data
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://svn.apache.org/repos/asf/pig/trunk/tutorial/data/&quot;&gt;https://svn.apache.org/repos/asf/pig/trunk/tutorial/data/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://raw.github.com/somoso/basedbible/master/bible.txt&quot;&gt;https://raw.github.com/somoso/basedbible/master/bible.txt&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://raw.github.com/somoso/basedbible/master/bible.txt&quot;&gt;http://SHAKESPEARElib.ru/SHAKESPEARE/sonnets.txt_Contents&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://raw.github.com/somoso/basedbible/master/bible.txt&quot;&gt;http://www.ccel.org/ccel/bible/kjv.txt&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;operation&quot;&gt;Operation&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Illustrate Operation&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;DESCRIBE&lt;/li&gt;
      &lt;li&gt;EXPLAIN&lt;/li&gt;
      &lt;li&gt;ILLUSTRATE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Relation Operation&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;LOAD&lt;/li&gt;
      &lt;li&gt;STORE&lt;/li&gt;
      &lt;li&gt;FOREACH&lt;/li&gt;
      &lt;li&gt;FILTER&lt;/li&gt;
      &lt;li&gt;GROUP / COGROUP&lt;/li&gt;
      &lt;li&gt;JOIN&lt;/li&gt;
      &lt;li&gt;ORDER&lt;/li&gt;
      &lt;li&gt;DISTINCT&lt;/li&gt;
      &lt;li&gt;UNION&lt;/li&gt;
      &lt;li&gt;SPLIT&lt;/li&gt;
      &lt;li&gt;STREAM&lt;/li&gt;
      &lt;li&gt;DUMP&lt;/li&gt;
      &lt;li&gt;LIMIT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;aggregation&quot;&gt;Aggregation&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;GROUP … BY …&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Count number of times each user appears in the excite data set;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/test/pig/tutorial/data/excite-small.log&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cntd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREACH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STORE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;group_output&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;grouping&quot;&gt;Grouping&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Separate operation from applying aggregate functions&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Output : (key,bag), bag contains a tuple of every records with the key&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  alan     1
  bob      9     =&amp;gt; alan, {(alan,1),(alan,3)}
  alan     3        bob,{(bob,9)}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;filtering&quot;&gt;Filtering&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;FILTER … BY …&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get high frequency users whose count is great than 50&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/test/pig/tutorial/data/excite-small.log&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cntd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREACH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fltrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STORE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fltrd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;filter_output&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;sorting&quot;&gt;Sorting&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;ORDER … BY …&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sort high frequency users by frequency&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/test/pig/tutorial/data/excite-small.log&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;grpd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cntd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREACH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERATE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fltrd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;srtd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fltrd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STORE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srtd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sort_output&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;word-count&quot;&gt;Word Count&lt;/h1&gt;
&lt;p&gt;Word count on King James Bible data and Shakespeare’s works&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;King James Bible
    &lt;ul&gt;
      &lt;li&gt;INPUT:’/test/bible-kjv.txt’&lt;/li&gt;
      &lt;li&gt;OUTPUT: ‘bible_freq’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shakespeare’s works
    &lt;ul&gt;
      &lt;li&gt;INPUT:’/test/shakespeare_sonnets.txt’&lt;/li&gt;
      &lt;li&gt;OUTPUT:’shake_freq’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;word-count---continue&quot;&gt;Word Count - Continue&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/test/bible-kjv.txt&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKENIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chararray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;w+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bible_freq&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/test/shakespeare_sonnets.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKENIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chararray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;w+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;shake_freq&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;join&quot;&gt;Join&lt;/h1&gt;
&lt;p&gt;Find words that are in both the King James Version of Bible and Shakespeare’s sonnets&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;bible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bible_freq&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shake&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;shake_freq&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;both&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bible&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STORE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;both&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;both_words&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;anti-join&quot;&gt;Anti-Join&lt;/h1&gt;
&lt;p&gt;Find words that are in the Bible that are not in Shakespeare.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;cogrp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COGROUP&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;bible&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;noshake_grp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cogrp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;noshake&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREACH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noshake_grp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLATTEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STORE&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;noshake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;noshake&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;cogrouping&quot;&gt;Cogrouping&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;A generalization of grouping&lt;/li&gt;
  &lt;li&gt;Keys of two (or more ) inputs are collected&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OUTPUT: (key,bag1,bag2,…), contains multi bags with records in the key&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  alan     1    alan     5 
  bob      9    bob      9  =&amp;gt;  {alan, {(alan,1),(alan,3)},{alan,5}}
  alan     3                    bob,{(bob,9),},{}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nested-operations&quot;&gt;Nested Operations&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;FOREACH .. { … }&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;FOREACH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;splitting&quot;&gt;Splitting&lt;/h1&gt;
&lt;p&gt;Data flow need not be linear, can be split explicitly:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SPLIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;function&quot;&gt;Function&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Piggy Bank&lt;/strong&gt;: &lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/PiggyBank&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/PiggyBank&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Eval function&lt;/strong&gt;: MAX, AVG, TKENIZE, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Filter function&lt;/strong&gt;: IsEmpty, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Load function&lt;/strong&gt;: TextLoader, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Store function&lt;/strong&gt;: PigStorage, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;user-defined-functions&quot;&gt;User Defined Functions&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Definition&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;org.apache.pig.EvalFunc&lt;/li&gt;
      &lt;li&gt;org.apache.pig.FilterFunc&lt;/li&gt;
      &lt;li&gt;org.apache.pig.LoadFunc&lt;/li&gt;
      &lt;li&gt;org.apache.pig. StoreFunc  &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Usage&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;REGISTER&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;pig-udf.jar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hchen9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyUDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myUDF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hchen9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyUDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;myUDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;stream&quot;&gt;Stream&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;STREAM … THROUGH script AS schema&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;STREAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THROUGH&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`cut -f 2`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     
&lt;span class=&quot;n&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`script_file_name`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SHIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;script_file_path&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STREAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THROUGH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;custom-load--store&quot;&gt;Custom Load &amp;amp; Store&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Default: data is tab separated UTF-8&lt;/li&gt;
  &lt;li&gt;User can set delimiter&lt;/li&gt;
  &lt;li&gt;Customize load/store function to handle de/serialization of the data&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;parameter&quot;&gt;Parameter&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Parameters:
    &lt;ul&gt;
      &lt;li&gt;Command arguments: pig -param input=&amp;lt;INPUT&amp;gt;&lt;/li&gt;
      &lt;li&gt;Parameters file : pig -param_file &amp;lt;PARAM_FILE&amp;gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Usage: $input&lt;/li&gt;
  &lt;li&gt;Example: &lt;a href=&quot;https://github.scm.corp.ebay.com/hchen9/capman-data/blob/master/hql/capman/hadoop_cpmn_env.param&quot;&gt;capman-data/hql/capman/hadoop_cpmn_env.param&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;macro&quot;&gt;Macro&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Definition&lt;/strong&gt;: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;DEFINE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Import&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;IMPORT&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;pig.macro&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Example: &lt;a href=&quot;https://github.scm.corp.ebay.com/hchen9/capman-data/blob/master/hql/capman/hadoop_cpmn_macro.pig&quot;&gt;capman-data/hql/capman/hadoop_cpmn_macro.pig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;case-study&quot;&gt;Case Study&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Hadoop mapreduce job summary log : /logs/hadoop-mapreduce.jobsummary.log.2013-10-02
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.scm.corp.ebay.com/hchen9/hadoop-learning/blob/master/pig/src/main/pig/log_spliter.py&quot;&gt;log_spliter.py&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.scm.corp.ebay.com/hchen9/hadoop-learning/blob/master/pig/src/main/pig/jobsummary_log.pig&quot;&gt;job_summary_log.pig&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Capman data process: &lt;a href=&quot;https://github.scm.corp.ebay.com/hchen9/capman-data&quot;&gt;capman-data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;advanced-references--topics&quot;&gt;Advanced References &amp;amp; Topics&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Why Pig Latin instead of SQL&lt;br /&gt; &lt;a href=&quot;http://infolab.stanford.edu/~olston/publications/sigmod08.pdf&quot;&gt;http://infolab.stanford.edu/~olston/publications/sigmod08.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pig performance&lt;br /&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/PigMix&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/PigMix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pig UDF Manual &lt;br /&gt;&lt;a href=&quot;http://wiki.apache.org/pig/UDFManual&quot;&gt;http://wiki.apache.org/pig/UDFManual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Programming Pig &lt;br /&gt;&lt;a href=&quot;http://www.amazon.com/Programming-Pig-Otx-Alan-Gates/dp/1449302645&quot;&gt;http://www.amazon.com/Programming-Pig-Otx-Alan-Gates/dp/1449302645&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache Pig Document &lt;br /&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/PIG/Index&quot;&gt;https://cwiki.apache.org/confluence/display/PIG/Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;thanks-you&quot;&gt;Thanks you&lt;/h1&gt;
&lt;p&gt;Hao Chen&lt;/p&gt;

&lt;p&gt;eBay Inc.&lt;br /&gt;
&lt;a href=&quot;http://haoch.me&quot;&gt;haoch.me&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2013 New Apache Hadoop Committer</title>
   <link href="http://haoch.me/articles/new-hadoop-committer.html"/>
   <updated>2013-12-13T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/new-hadoop-committer</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://hadoop.apache.org/images/apache_feather.gif&quot; alt=&quot;Apache&quot; /&gt;
&lt;img src=&quot;http://hadoop.apache.org/images/hadoop-logo.jpg&quot; alt=&quot;Apache Hadoop&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Jian He &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#106;&amp;#104;&amp;#101;&amp;#064;&amp;#104;&amp;#111;&amp;#114;&amp;#116;&amp;#111;&amp;#110;&amp;#119;&amp;#111;&amp;#114;&amp;#107;&amp;#115;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#106;&amp;#104;&amp;#101;&amp;#064;&amp;#104;&amp;#111;&amp;#114;&amp;#116;&amp;#111;&amp;#110;&amp;#119;&amp;#111;&amp;#114;&amp;#107;&amp;#115;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/strong&gt;: YARN
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-L3pewRCyXjA--9h90XnR8KmxgEqce4=JuDdDA4jxtuQQ@mail.gmail.com%3E&quot;&gt;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-L3pewRCyXjA–9h90XnR8KmxgEqce4=JuDdDA4jxtuQQ@mail.gmail.com%3E&lt;/a&gt; &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Zhijie Shen &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#122;&amp;#115;&amp;#104;&amp;#101;&amp;#110;&amp;#064;&amp;#104;&amp;#111;&amp;#114;&amp;#116;&amp;#111;&amp;#110;&amp;#119;&amp;#111;&amp;#114;&amp;#107;&amp;#115;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#122;&amp;#115;&amp;#104;&amp;#101;&amp;#110;&amp;#064;&amp;#104;&amp;#111;&amp;#114;&amp;#116;&amp;#111;&amp;#110;&amp;#119;&amp;#111;&amp;#114;&amp;#107;&amp;#115;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/strong&gt;: YARN and MapReduce
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-LWv7p6_DbUcGB83AiQ9JaXRbmrd2+09bd+14xNatoDdQ@mail.gmail.com%3E&quot;&gt;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-LWv7p6_DbUcGB83AiQ9JaXRbmrd2+09bd+14xNatoDdQ@mail.gmail.com%3E&lt;/a&gt; &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ravi Prakash &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#114;&amp;#097;&amp;#118;&amp;#105;&amp;#104;&amp;#111;&amp;#111;&amp;#064;&amp;#121;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#114;&amp;#097;&amp;#118;&amp;#105;&amp;#104;&amp;#111;&amp;#111;&amp;#064;&amp;#121;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/strong&gt;: Hadoop Core
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-L82jByizCkf7cuA==d5422WxYTZOSe2zSgFvDVFjj2pg@mail.gmail.com%3E&quot;&gt;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-L82jByizCkf7cuA==d5422WxYTZOSe2zSgFvDVFjj2pg@mail.gmail.com%3E&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Junping Du &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#106;&amp;#100;&amp;#117;&amp;#064;&amp;#118;&amp;#109;&amp;#119;&amp;#097;&amp;#114;&amp;#101;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#106;&amp;#100;&amp;#117;&amp;#064;&amp;#118;&amp;#109;&amp;#119;&amp;#097;&amp;#114;&amp;#101;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/strong&gt;: Hadoop Core
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-KE0STaADiA55Nf779f_COE3U1Sx-bAtO6Q8rCf-A1mCw@mail.gmail.com%3E&quot;&gt;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-KE0STaADiA55Nf779f_COE3U1Sx-bAtO6Q8rCf-A1mCw@mail.gmail.com%3E&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Omkar Joshi &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#111;&amp;#118;&amp;#106;&amp;#102;&amp;#111;&amp;#114;&amp;#117;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#111;&amp;#118;&amp;#106;&amp;#102;&amp;#111;&amp;#114;&amp;#117;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/strong&gt;: YARN
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-JTdiruihWt=TG1AdLT-2Hq+47RZvfc_UYXbEK23tgEvA@mail.gmail.com%3E&quot;&gt;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-JTdiruihWt=TG1AdLT-2Hq+47RZvfc_UYXbEK23tgEvA@mail.gmail.com%3E&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mayank Bansal &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#109;&amp;#097;&amp;#098;&amp;#097;&amp;#110;&amp;#115;&amp;#097;&amp;#108;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#109;&amp;#097;&amp;#098;&amp;#097;&amp;#110;&amp;#115;&amp;#097;&amp;#108;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/strong&gt;: YARN and MapReduce
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-JuAVmvXxiBFFqTCpvYWhV4X0hixYgT549Z34jHYxS6LA@mail.gmail.com%3E&quot;&gt;http://mail-archives.apache.org/mod_mbox/hadoop-general/201312.mbox/%3CCAMEEY-JuAVmvXxiBFFqTCpvYWhV4X0hixYgT549Z34jHYxS6LA@mail.gmail.com%3E&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Bash Options</title>
   <link href="http://haoch.me/articles/bash-options.html"/>
   <updated>2013-12-11T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/bash-options</id>
   <content type="html">&lt;p&gt;getopt与getopts提供均可基于相同的规则来重新组合参数，来方便的获取命令行选项以及其值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getopt与getopts区别在于&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;getopt&lt;/code&gt;是个外部binary文件，作为外部命令调用，而&lt;code&gt;getopts&lt;/code&gt;是built-in bash 内置命令，可直接调用。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;getopts&lt;/code&gt; 的 shell 提供内置 &lt;strong&gt;OPTARG&lt;/strong&gt; 这个变量，&lt;code&gt;getopts&lt;/code&gt;会依次修改这个变量，可直接通过 &lt;strong&gt;$OPTARG&lt;/strong&gt; 读取参数值，但是&lt;code&gt;getopt&lt;/code&gt;则需要通过&lt;code&gt;set&lt;/code&gt;来重新定位参数 &lt;code&gt;$1&lt;/code&gt;(参数名),&lt;code&gt;$2&lt;/code&gt;（参数值，如存在），并使用&lt;code&gt;shift&lt;/code&gt;的方式依次获取。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# getopts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -- &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;getopt -o hi: -l &lt;span class=&quot;s2&quot;&gt;&amp;quot;help;input:&amp;quot;&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0&amp;quot;&lt;/span&gt; -- &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;-gt 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;	case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; in:
		-h&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
		--&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# getopts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getopts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi:&amp;quot;&lt;/span&gt; OPTION 
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;	case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$OPTION&amp;quot;&lt;/span&gt; in
		-h&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
		&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	esace
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;当参数值中包含空格时，对于&lt;code&gt;getopt&lt;/code&gt;会识别为多个参数，因此，这种情况下只能用&lt;code&gt;getopts&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般情况而言，优先选择&lt;code&gt;getopts&lt;/code&gt;，当需要定义更复杂的参数规则，如长短参数等时，需使用&lt;code&gt;getopt&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;getopt&quot;&gt;getopt&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Execute getopt&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;getopt -o&lt;span class=&quot;s2&quot;&gt;&amp;quot;123:&amp;quot;&lt;/span&gt;-l&lt;span class=&quot;s2&quot;&gt;&amp;quot;one,two,three:-n $0&amp;quot;&lt;/span&gt;--&lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Bad arguments&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;	&lt;/span&gt;exit1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A little magic&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval set&lt;/span&gt; -- &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ARGS&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Now go through all the options&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;	case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; in
    -1&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--one&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Uno&amp;quot;&lt;/span&gt;
      	&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    -2&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--two&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dos&amp;quot;&lt;/span&gt;
      	&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
       
    -3&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--three&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Tres&amp;quot;&lt;/span&gt;

      	&lt;span class=&quot;c&quot;&gt;# We need to take the option argument&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -n&lt;span class=&quot;s2&quot;&gt;&amp;quot;$2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Argument: $2&amp;quot;&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;      	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    --&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;getopts&quot;&gt;getopts&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getopts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;123:&amp;quot;&lt;/span&gt; OPTION
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;	case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OPTION&lt;/span&gt; in
    	1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Uno&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    	2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    	3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Tres: $OPTARG&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 	
    	&lt;span class=&quot;c&quot;&gt;# Unknown option. No need for an error, getopts informs&lt;/span&gt;
    	&lt;span class=&quot;c&quot;&gt;# the user itself.&lt;/span&gt;
    	&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Slide Show (S9) - A Free Web Alternative to PowerPoint and Keynote in Ruby</title>
   <link href="http://haoch.me/articles/slideshow.html"/>
   <updated>2013-11-20T00:00:00+01:00</updated>
   <id>http://haoch.me/articles/slideshow</id>
   <content type="html">&lt;p&gt;Slideshow(S9) 是一个ruby gem，允许你使用类wiki标记语言(markdown)创建和编辑幻灯片，修改和阅读都非常方便。这个项目内置支持非gem “out-of-gem” 的无损向量图主题扩展，并提供许多很漂亮的&lt;a href=&quot;http://slideshow-s9.github.io/gallery.html&quot;&gt;主题库&lt;/a&gt;，当然也可以自己定义自己的主题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://0.gravatar.com/avatar/3d0992109f4581ea0e898e37fb48af39?d=https%3A%2F%2Fidenticons.github.com%2F92a03b30888f1885fd275110ed3a6dda.png&amp;amp;r=x&amp;amp;s=150&quot; alt=&quot;Slideshow S9&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;开始使用&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第一步，安装 &lt;a href=&quot;https://rubygems.org/gems/slideshow&quot;&gt;&lt;code&gt;slideshow&lt;/code&gt;&lt;/a&gt; gem,在终端作为命令中使用，为了更方便的管理ruby环境和gemsets，推荐使用&lt;a href=&quot;http://www.haoch.me/articles/ruby-with-rvm.html&quot;&gt;&lt;code&gt;rvm&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  $ gem install slideshow
	
  SYNOPSIS
  slideshow [global options] command [command options] [arguments...]
	
  GLOBAL OPTIONS
      -c, --config=PATH - Configuration Path (default: /home/hchen9/.slideshow)
      --help            - Show this message
      -q, --quiet       - Only show warnings, errors and fatal messages
      --verbose         - (Debug) Show debug messages
      --version         - Display the program version
	
  COMMANDS
      about, a           - (Debug) Show more version info
      build, b           - Build slideshow
      help               - Shows a list of commands or help for one command
      install, i         - Install template pack
      list, ls, l        - List installed template packs
      new, n             - Generate quick starter sample
      plugins, plugin, p - (Debug) List plugin scripts in load path
      test               - (Debug) Show global options, options, arguments for test command
      update, u          - Update shortcut index for template packs &#39;n&#39; plugins
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二步，创建初始slide，并使用类wiki标记语言（&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; 或 &lt;a href=&quot;http://redcloth.org/textile&quot;&gt;Textile&lt;/a&gt;）编辑纯文本的slides,以 &lt;a href=&quot;https://raw.github.com/haoch/haoch.github.io/master/talks/practical_pig/index.md&quot;&gt;pig.md&lt;/a&gt; 为例&lt;/p&gt;

    &lt;p&gt;可使用&lt;code&gt;slide&lt;/code&gt;或者手动创建，文件类型可以是md,markdown,textile等&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  slide new
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;使用 &lt;code&gt;#&lt;/code&gt; 或 &lt;code&gt;===&lt;/code&gt;（markdown）, 或者 &lt;code&gt;h1&lt;/code&gt;(textile)，即编译成HTML后对应 &lt;code&gt;h1&lt;/code&gt; 的元素，作为新的slide的开始，其内容为Slide的标题，示例内容如下:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  Title: Practical Pig
	
  Practical Pig 
  =============
  Agenda
	
  * Why pig
  * Components
  * How it works with Map Reduce
  * Pig Latin
  * Advanced References and topics
	
  Why Pig
  =======
  * Map Reduce is very powerful, but:
      - requires a Java programmer
      - re-invent common functionality (join, filter,etc)
  * Pig provides a higher level language
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;或者&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  Title: Practical Pig

  h1. Practical Pig 
	
  Agenda
	
  * Why pig
  * Components
  * How it works with Map Reduce
  * Pig Latin
  * Advanced References and topics
	
  h1. Why Pig

  * Map Reduce is very powerful, but:
      - requires a Java programmer
      - re-invent common functionality (join, filter,etc)
  * Pig provides a higher level language
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第三步，使用&lt;code&gt;slideshow build&lt;/code&gt;命令编译slides，&lt;code&gt;-t&lt;/code&gt;后跟参数指定主题，默认主题为&lt;a href=&quot;http://slideshow-s9.github.io/gallery.html&quot;&gt;S6&lt;/a&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  $ slideshow build index

  =&amp;gt; Preparing slideshow &#39;index.html&#39;...
  =&amp;gt; Done.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第四步，浏览器中打开生成的html文件即可预览 (实例：&lt;a href=&quot;http://www.haoch.me/talks/practical_pig/#slide2&quot;&gt;Pratical Pig&lt;/a&gt;，基于&lt;a href=&quot;https://github.com/slideshow-s9/slideshow-google-html5-slides&quot;&gt;google-html5&lt;/a&gt;主题: &lt;code&gt;slideshow build index -t g5&lt;/code&gt;);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;使用主题模板&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;选择:&lt;a href=&quot;http://slideshow-s9.github.io/gallery.html&quot;&gt;Slideshow (S9) Template Gallery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  slideshow install g5
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;或&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  $ cd ~/.slideshow/templates
  $ git clone git://github.com/slideshow-s9/slideshow-google-html5-slides.git
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;查看已安装模板&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  $ slideshow list
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  $ slideshow build tutorial -t g5
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-2&quot;&gt;相关资料&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Slideshow (S9): &lt;a href=&quot;http://slideshow-s9.github.io&quot;&gt;http://slideshow-s9.github.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Template Gallery:&lt;a href=&quot;http://slideshow-s9.github.io/gallery.html&quot;&gt;http://slideshow-s9.github.io/gallery.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Github Repository : &lt;a href=&quot;https://github.com/slideshow-s9&quot;&gt;https://github.com/slideshow-s9&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Markdown: &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;http://daringfireball.net/projects/markdown/syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Textile: &lt;a href=&quot;http://redcloth.org/textile/&quot;&gt;http://redcloth.org/textile/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;reStructuredText:　&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;http://docutils.sourceforge.net/rst.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;q--a&quot;&gt;Q &amp;amp; A&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Group &amp;amp; Maillist: &lt;a href=&quot;https://groups.google.com/forum/#!forum/webslideshow&quot;&gt;https://groups.google.com/forum/#!forum/webslideshow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Cron作业调度</title>
   <link href="http://haoch.me/articles/intro-to-cron.html"/>
   <updated>2013-10-22T00:00:00+02:00</updated>
   <id>http://haoch.me/articles/intro-to-cron</id>
   <content type="html">&lt;p&gt;本文主要涵盖cron的基本特性以及如何使用的介绍。&lt;/p&gt;

&lt;h2 id=&quot;cron&quot;&gt;什么是Cron？&lt;/h2&gt;
&lt;p&gt;Cron是指允许linux/unix用户自动（automatically）在特定时间或者日期执行命令或者脚本（即命令的组合）的一个程序。一般而言，被用作系统管理命令，比如makewhatis，为man -k命令创建搜索数据库， 或者运行备份脚本，当然并非仅限于此。如今还有一个很普遍的用途是自动连接网路并下载你email。本文以 Vixie Cron为例，这是Paul Vixie开发的一个版本。&lt;/p&gt;

&lt;h2 id=&quot;cron-1&quot;&gt;如何启动Cron&lt;/h2&gt;
&lt;p&gt;Cron是一个守护进程(daemon)，只需要启动一次，然后一直保持休眠直到被调用。就像web服务器便是一个守护进程，启动后会一直休眠，当接收到页面请求时才会被唤醒。Con守护进程，即 &lt;strong&gt;crond&lt;/strong&gt; ,会在某个文件配置的某个时刻被唤醒，这个配置文件称之谓 &lt;strong&gt;crontabs&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;在大多数linux发行版本中crond是自动安装并添加到启动脚本中。可通过以下命令查看，第一行显示crond正在运行：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps aux &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep crond
root      4258  0.0  0.0 117204  1264 ?        Ss   Sep26   1:02 crond
hchen     8383  0.0  0.0 103244   876 pts/61   S+   21:58   0:00 grep crond
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;若cron被kill或者没有启动，可以将crond添加至启动脚本中，然后启动即可。若希望不重启，可以root帐户执行：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crond
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;进程将自动后台运行，不用强制添加&amp;amp;，此外许多守护程序，如httpd和syslogd，修改杯之后需要重启， 但Vixie Cron不需要，一旦文件被crontab命令修改后便会自动载入，其他版本的可能是每分钟一次或者重启的时候。&lt;/p&gt;

&lt;h2 id=&quot;cron-2&quot;&gt;使用cron&lt;/h2&gt;
&lt;p&gt;用许多种方式使用cron。&lt;/p&gt;

&lt;p&gt;在/etc目录中，你也许会找到一些子目录叫’cron.hourly’，’cron.daily’，’cron.weekly’ and ‘cron.monthly’,若将一个脚本，置于这些目录中，那么它将以每小时，每天，每周或者每个月的周期执行。&lt;/p&gt;

&lt;p&gt;如果希望更灵活的，可以编辑一个crontab 文件（cron的配置文件）。主配置文件是/etc/crontab。在默认的RedHat安装中，crontab的内容如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/bash
&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/sbin:/bin:/usr/sbin:/usr/bin
&lt;span class=&quot;nv&quot;&gt;MAILTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/

&lt;span class=&quot;c&quot;&gt;# For details see man 4 crontabs&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Example of job definition:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# .---------------- minute (0 - 59)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# |  .------------- hour (0 - 23)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# |  |  .---------- day of month (1 - 31)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# |  |  |  |  |&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# *  *  *  *  * user-name command to be executed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第一部分,显而易见,设置cron的环境变量&lt;/p&gt;

&lt;p&gt;&lt;em&gt;SHELL&lt;/em&gt; cron 运行使用的shell,默认与 /etc/passwd 中指定的相同。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PATH&lt;/em&gt; 包含cron的搜索路径。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MAILTO&lt;/em&gt; 指定每个命令输出邮件给谁，无论状态报表或错误等。如果没有指定,输出将发给进程的拥有者。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HOME&lt;/em&gt; 是指用作cron的home目录。默认与 /etc/passwd 相同。&lt;/p&gt;

&lt;p&gt;第二部分较为复杂，也是crontab主要定制的内容。
cron的条目是由一些列的字段组成，与/etc/passwd及其相似，只不过crontab是通过 _空白_分隔。通常每个条目有七个字段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;minute hour dom month dow user cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt; minute &lt;/td&gt;&lt;td&gt;控制一个小时的哪分钟运行，取值‘0’至‘59’之间&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; hour &lt;/td&gt;&lt;td&gt;指定哪个小时运行，24小时制，取值0至23之间，0表示午夜&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; dom &lt;/td&gt;&lt;td&gt;指定一个月的第几天（the Day of Month），如每个月的第十九天&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; month &lt;/td&gt;&lt;td&gt;指定月份，可用数值类型（0-12），或与月份名称相同，如jan,feb,mar,apr等 &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; dow &lt;/td&gt;&lt;td&gt;指定星期几（the Week of Month），可用数值类型（0-12）和星期名（如 sun 等)，注意0与7均表示星期日&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; user &lt;/td&gt;&lt;td&gt;指定命令运行的用户&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; cmd &lt;/td&gt;&lt;td&gt;指定需要运行的命令，可包含多个字段和空格 &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;等dow为0和7时均表示星期日。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当dom和dow同时指定时，满足任何一种命令均会执行&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Vixiere Cron 同时也接受字段中使用列表，格式可以以“,”逗号分隔单个元素或者以“-”表示区间&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; 59 11 * * 1,2,3,4,5 root cmd
 59 11 * * 1-5 root cmd
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于不需要指定值的字段，只需填入*。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;Book：&lt;strong&gt;Running Linux&lt;/strong&gt; (O’Reilly ISBN: 1-56592-469-X)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>基于Github搭建Maven仓库</title>
   <link href="http://haoch.me/articles/build-maven-repo-on-github.html"/>
   <updated>2013-10-11T00:00:00+02:00</updated>
   <id>http://haoch.me/articles/build-maven-repo-on-github</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://maven.apache.org&quot;&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;/a&gt; 是一个项目管理和构建自动化工具， &lt;strong&gt;Maven仓库&lt;/strong&gt; 是用于存放不同编译的artifacts和dependencies（依赖）的模块集合。严格而言，主要有两类仓库： &lt;strong&gt;local（本地）&lt;/strong&gt; 和 &lt;strong&gt;remote（远端）&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;本地仓库存放本地安装的来自远端仓库的模块，可看作远端模块在本地的一份缓存，同时也包含本地编译尚未发布的模块。远端仓库指任何类型的仓库，能够通过许多不同的协议访问，如file://和http://，可以是“真正的”类似&lt;a href=&quot;http://repo.maven.org&quot;&gt;repo.maven.org&lt;/a&gt;由第三方提供的远程仓库用于提供公开模块下载，也可用于团队内部基于文件或者http服务器分享私有模块。&lt;/p&gt;

&lt;p&gt;不论本地还是远端仓库都是满足相同的结构规则，因此远端模块很容易共享到任何地方，也可以同步到本地以离线环境下使用。一般而言这些仓库的构造对于maven用户是完全透明的。&lt;/p&gt;

&lt;p&gt;一般而言，业界已经有许多成熟的maven仓库解决方案，如Nexus等，只需拥有一台服务器，并下载并安装maven仓库服务软件，然后启动即可。但对于个人开发者而言，若需要搭建用于分享和发布个人开发artifacts的公开maven仓库，选择之一自然是购买一台vps服务器，然后安装maven仓库服务软件，然而另外一种完全免费的选择则是完全基于github实现，本文将为您详细介绍后一种更为极客的实践方案。其原理是利用github的git push来发布artifects，利用github提供的公开raw服务提供对外下载服务。当向开源社区共享自己开发的artifects时，只需要提供模块pom信息和个人独一无二的仓库地址即可：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;https://raw.github.com/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;github_account&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/maven/snapshot/
https://raw.github.com/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;github_account&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/maven/release/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;准备&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;申请Github帐号并配置ssh public key: &lt;a href=&quot;http://github.com&quot;&gt;http://github.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;安装Git工具: &lt;a href=&quot;http://git-scm.com&quot;&gt;http://git-scm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;安装Maven工具: &lt;a href=&quot;http://maven.apache.org&quot;&gt;http://maven.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;搭建过程&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 利用&lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt;网站中创建一个新的仓库，记下仓库地址: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git@github.com:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;github_account&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/maven.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 进入 ${HOME}/.m2/repository/,初始化git本地仓库，添加员段地址。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.m2/repository
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add remote origin git@github.com:hchen9/maven.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 创建.gitignore 将文件匹配符&lt;code&gt;*&lt;/code&gt;加入其中， 并将.gitignore提交git本地仓库master分支&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .gitgnore
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;add .gitignore by ignoring all&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; 分别创建分支&lt;code&gt;snapshot&lt;/code&gt;与&lt;code&gt;release&lt;/code&gt;并push至远端仓库，用于发布不同状态的artifects，默认情况切换至&lt;code&gt;snapshot&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch snapshot
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch release

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin snapshot
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin release

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout snapshot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; 当开发完成发布新的artifects（例如com.github.${github_account}:${artifactId}:${version}）时，首先利用&lt;code&gt;mvn install&lt;/code&gt; 将artifects安装至本地maven仓库中 &lt;code&gt;~/.m2/repository/&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;project_root&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mvn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后，将需要发布对应版本的artifects所闻提交至本地git仓库中，然后push至对应的分支snapshot 或 release.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.m2/repository
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add -f com/github/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;github_account&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;snapshot of com.github.${github_account}:${artifactId}:${version}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin snapshot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; 在pom.xml中使用maven artifact添加以下配置：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--Add repositories--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;haoch-maven-snapshot-repository&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;haoch-maven-snapshot-repository&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://raw.github.com/${github_account}/maven/snapshot/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;haoch-maven-release-repository&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;haoch-maven-release-repository&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://raw.github.com/${github_account}/maven/release/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Add dependencies --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;${artifactId}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.github.${github_account}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;w
## 总结
Github 目前为止也许是最好的代码托管服务和社交编程平台，拥有非常好的开源分享文化，在这里分享可复用的maven artifact自然也是最佳选择，Git原生提供的强大版本控制能力，在日常开发中必不可少，加上Github免费的git repository的静态raw访问服务，Github作为maven remote repository可以和日常开发工作有效的融合。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java String 内存模型</title>
   <link href="http://haoch.me/articles/java-string.html"/>
   <updated>2013-09-28T00:00:00+02:00</updated>
   <id>http://haoch.me/articles/java-string</id>
   <content type="html">&lt;h2 id=&quot;string-&quot;&gt;String 对象与引用&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;new： 先创建创建对象，然后在string pool中查找是否值相同的对象，否则创建对应的string对象&lt;/li&gt;
  &lt;li&gt;”“：直接查找，若有直接返回引用，否则创建并返回引用&lt;/li&gt;
  &lt;li&gt;intern()：始终返回string object本身的引用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;string--1&quot;&gt;String 连接&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;常量＋常量，内存中查找是否存在值相等的对象，存在则直接返回引用，否则创建新的对象&lt;/li&gt;
  &lt;li&gt;常量＋变量，创建新的字符对象存储结果，并返回引用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;string&quot;&gt;如何正确使用String?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;不要使用new （new 每次都会创建一个新的对象,而不会寻找值相同的引用）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用StringBuffer来做连接操作&lt;/p&gt;

    &lt;p&gt;String 是immutable类，做连接操作时，都会创建临时的对象来保存中间结果，而StringBuffer 是mutable class, 不需要临时创建对象来保存结果，从而提高性能&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;StringBuffer vs StringBuilder&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;StringBuffer 是线程安全的(synchronized), StringBuilder 不是，因此在非多线程情景中，使用StringBuilder性能会更好&lt;/li&gt;
      &lt;li&gt;StringBuilder类提供除了异步之外，完整兼容StringBuffer的API，这个类被设计用来在String缓存被单线程中时作为StringBuffer的替换。This class [StringBuilder] provides an API compatible with StringBuffer, but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for StringBuffer in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations. &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>A little cup of CoffeeScript</title>
   <link href="http://haoch.me/articles/a-little-cup-of-coffee.html"/>
   <updated>2013-09-21T00:00:00+02:00</updated>
   <id>http://haoch.me/articles/a-little-cup-of-coffee</id>
   <content type="html">&lt;p&gt;本文并非真正的介绍咖啡或者与咖啡有关的任何东西，而是对coffeescript这门语言的设计哲学，特性以及弊端等做一个简短的介绍。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;一直以来JavaScript认为一个浏览器的脚本语言而已，然后随着互联网的发展，前端技术的成熟，富客户端的应用越来越多，而且node js等server 端javascript框架的出现，使得javascript已然成为一种可应用于任何场景的语言，应用开发中JavaScript的开发比重也越来越大，然而JavaScript作为一门古老的语言，长期以来却未有过较大发展，然后其语法本身较为冗余罗嗦，编程过程中，需要书写大量重复代码，而且部分语法语义模糊怪异，模菱两可，很容易无意之间为代码质量留下隐患，同时JavaScript语法本身类c语言，语义性和可读性方面都较为古老，针对这些问题，更为现代的语言如ruby和python中均给出了更为幽雅的解决方案。因此，如果你希望如python或者ruby般幽雅的写javascript，coffeescript会是一个不错的选择。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;coffee-is-just-javascript&quot;&gt;Coffee is just JavaScript&lt;/h2&gt;

&lt;p&gt;Coffee Script 并非是JavaScript的超集或者独立于javascript的语言，“Coffee script is just javascript“，更准确的说是javascript的子集，针对javascript的所有特性，取其精华，去其糟粕，进一步融合ruby和python的优秀语法加以适当改写而成。&lt;/p&gt;

&lt;p&gt;其主要&lt;strong&gt;优点&lt;/strong&gt;在于:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Coffee Script 是编译的JavaScript&lt;/strong&gt;，coffeescript中可以原生使用任何javascript生态系统中前端framework和npm仓库中的package。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;引入了诸多Ruby和Python的优秀特性&lt;/strong&gt;，其中最大的特点之一是以类Python的强制缩进和空白分割语法，取代了大量花括号“｛｝”的使用，使代码层次更为清晰可读。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;更少代码量&lt;/strong&gt;， 经过coffeescript作者统计，使用coffeescript比使用javascript平均可减少三分之一到二分之一的代码量。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Javascript的精简子集&lt;/strong&gt;，去除了诸多费解的语法，以类自然语言如is，isnt，off，on等代替。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其主要&lt;strong&gt;缺点&lt;/strong&gt;在于:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;运行较慢&lt;/strong&gt;, 因为coffee运行前需要先通过coffee解析器编译成javascript，然后再通过javascript引擎执行，因此一般而言，部署的时候会预先先将coffee script 编译成javascript。当然随着coffee解析器的进一步优化，运行速度的差距必然越来越小。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;运行时不方便调试&lt;/strong&gt;，除非是coffee解析器解析过程中语法错误，coffeescript运行时报错显示的是javascript的错误栈信息，这样可能不易于很快的定位出错误的地方。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;coffee-&quot;&gt;Coffee 语法&lt;/h2&gt;

&lt;h4 id=&quot;section-1&quot;&gt;1. &lt;strong&gt;强制缩进与空白分割&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Coffee 语法的主要特点是利用了仿照Python的强制缩进和空白来做代码块分割。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;2. &lt;strong&gt;不使用分号&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Javascript 中句尾分号可选，但是js引擎运行前是会自动补充上的，在CoffeeScript中强制不允许使用分号。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;3. &lt;strong&gt;注释 #&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;类ruby和python的注释“＃”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单行注释&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#comments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;多行注释&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;var&quot;&gt;4. 变量声明无需var&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;function&quot;&gt;5. 函数声明无需function&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;无参数函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hao&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;固定参数函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;不固定参数函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;默认值参数函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-4&quot;&gt;6. &lt;strong&gt;函数调用&lt;/strong&gt;,使用小括号是可选的&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;扩展函数调用方法（至少传入一个参数）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;parents()&lt;/li&gt;
  &lt;li&gt;apply()&lt;/li&gt;
  &lt;li&gt;call()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;flow-control&quot;&gt;7. 流程控制(flow control)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;-&amp;gt;&lt;/strong&gt;: 函数内部上下文，函数域外无效&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;=&amp;gt;&lt;/strong&gt;: 本地（local）上下文，可调用函数作用域以外变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;if … then … else … then …&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后缀式条件判断: &lt;code&gt;it&#39;s code if heat &amp;lt; 5&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;!&lt;/strong&gt; &amp;amp; &lt;strong&gt;not&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;unless&lt;/strong&gt; &amp;amp; &lt;strong&gt;if not&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;is&lt;/strong&gt; &amp;amp; &lt;strong&gt;==&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;isnt&lt;/strong&gt; &amp;amp; &lt;strong&gt;!=&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;more …&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-5&quot;&gt;8. 字符串模板&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Chen,Hao&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-6&quot;&gt;9. 循环和遍历&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	
&lt;span class=&quot;n&quot;&gt;__method__&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__condition__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-7&quot;&gt;10. 数组声明与访问&lt;/h4&gt;

&lt;p&gt;声明&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
		&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;访问&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单索引访问：&lt;code&gt;arr[0]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;区间访问&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;aarr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-8&quot;&gt;11. 特殊操作符&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;@&lt;/strong&gt; =&amp;gt; &lt;em&gt;this&lt;/em&gt;,常用于类的实例变量或者方法声明中，作为this 关键字的缩写。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;::&lt;/strong&gt; =&amp;gt; &lt;em&gt;prototype&lt;/em&gt; ，常用语类的静态变量或者方法申明中，作为prototype关键字的缩写。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;?&lt;/strong&gt;:  存在操作符，若前面返回对象不为&lt;em&gt;null&lt;/em&gt;,”“或者undefined的条件下，继续执行，否则返回 &lt;em&gt;undefined&lt;/em&gt; 。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-9&quot;&gt;12. 类定义与使用&lt;/h4&gt;

&lt;p&gt;关键字：&lt;code&gt;class&lt;/code&gt;,&lt;code&gt;@property&lt;/code&gt;,&lt;code&gt;@method&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>关于本站</title>
   <link href="http://haoch.me/articles/site-building.html"/>
   <updated>2013-09-03T00:00:00+02:00</updated>
   <id>http://haoch.me/articles/site-building</id>
   <content type="html">&lt;p&gt;本站的建立得益于多种开源免费的软件或服务，正因为如此强大的开源社区文化，如此多拥有开源共享精神的天才工程师们，才能创建如此多优秀的开源软件服务大众。&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;页面生成器 - Jekyll&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;,这是一个精简的可适用于博客的静态站点生成器，由Github 联合创始人之一 &lt;a href=&quot;https://github.com/mojombo/&quot;&gt;Tom Preston-Werner&lt;/a&gt; 利用ruby开发，提供功能完善的静态页面模版和编程框架，目前社区较为活跃，许多非常不错的扩展或分支不断发展中，如&lt;a href=&quot;jekyllbootstrap.com/&quot;&gt;Jekyll-Bootstrap&lt;/a&gt;等，Gsithub page同样基于Jekyll。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jekyllrb.com/img/logo-2x.png&quot; alt=&quot;Jekyll&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jekyll---so-simple-jekyll-theme&quot;&gt;Jekyll主题 - So simple jekyll theme&lt;/h2&gt;
&lt;p&gt;本站主题基于&lt;strong&gt;&lt;a href=&quot;http://mademistakes.com/articles/so-simple-jekyll-theme.html&quot;&gt;So simple Jekyll&lt;/a&gt;&lt;/strong&gt;修改，感谢 &lt;a href=&quot;https://github.com/mmistakes&quot;&gt;Michael Rose&lt;/a&gt;独特而具有品位的设计 ，该主题以黑白为基调，幽雅纯粹，纯文本为内容，页面元素朴质，非常符合个人的审美和分享真实有价值内容的初衷。
&lt;img src=&quot;/images/so-simple-theme-preview.jpg&quot; alt=&quot;so-simple-theme-preview&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-page&quot;&gt;部署 - Github Page&lt;/h2&gt;
&lt;p&gt;本站部署基于&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;Github Page&lt;/a&gt; 服务原生运行于Jekyll 之上，Repository中的内容通过Jekyll解析后生成HTML页面然后展示出来，当只有静态页面或者文件时，可作为静态服务器使用，但同时因为可以利用Ruby结合Jekyll编程，所以也可以根据需求去自定义定制和扩展网站的功能，同时Github的核心git repository可以提供非常强劲的版本控制功能。&lt;/p&gt;

&lt;h2 id=&quot;dns----github-dns&quot;&gt;DNS域名  - Github DNS&lt;/h2&gt;
&lt;p&gt;Github Page 免费提供以&lt;code&gt;{USERNAME}.github.com&lt;/code&gt;(或&lt;code&gt;{USERNAME}.github.io&lt;/code&gt;)的二级域名映射至用户特定Repository的服务，只需要创建一个名为&lt;code&gt;{USERNAME}.github.com&lt;/code&gt;(或&lt;code&gt;{USERNAME}.github.io&lt;/code&gt;)的Repository即可，对应的二级域名即会以该Repository作为其根目录。此外Github 还提供&lt;strong&gt;DNS&lt;/strong&gt;映射服务，可以自己拥有的自定义域名指向Github page站点 &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&quot;&gt;＃&lt;/a&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先设置Gihub Repo：在Github repository的根目录添加文件&lt;code&gt;CNAME&lt;/code&gt;,并输入自定义的域名&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  example.com
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;然后设置域名DNS：具体设置在于使用&lt;code&gt;顶级域名&lt;/code&gt;还是&lt;code&gt;子域名&lt;/code&gt;。
    &lt;ul&gt;
      &lt;li&gt;若是&lt;strong&gt;顶级域名(domain)&lt;/strong&gt;时，应该使用&lt;strong&gt;A记录&lt;/strong&gt;指向&lt;strong&gt;&lt;code&gt;204.232.175.78&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;若时&lt;strong&gt;子域名(subdomain)&lt;/strong&gt;，最好使用&lt;strong&gt;CNAME&lt;/strong&gt;记录，可以在Github服务器IP改变时，自动适应，而A记录无法自动更新。&lt;/li&gt;
      &lt;li&gt;当使用自定义域名时,服务器会添加以下&lt;strong&gt;自动跳转&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;username.github.io&lt;/code&gt; ⇒ &lt;code&gt;example.com&lt;/code&gt; for user pages&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;www.example.com&lt;/code&gt; ⇒ &lt;code&gt;example.com&lt;/code&gt; for top-level domains&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;example.com&lt;/code&gt; ⇒ &lt;code&gt;www.example.com&lt;/code&gt; if the www subdomain is used&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看当前DNS状态(DNS更改到最终更新可能需要一天时间，需耐心等待)：&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;$ dig example.com +nostats +nocomments +nocmd&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
</feed>
